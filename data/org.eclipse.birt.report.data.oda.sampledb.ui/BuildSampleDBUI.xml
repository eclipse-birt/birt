<?xml version="1.0"?>
<!--
 *************************************************************************
 * Copyright (c) 2004, 2005 Actuate Corporation.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * Contributors:
 *  Actuate Corporation  - initial API and implementation
 *  
 *************************************************************************
 *
 *  Build.xml
 *
 *  Build script for project org.eclipse.birt.report.data.oda.sampledb
 *
 * 
 * The following are public targets callable by external users. 
 * 
 * "Clean" - Clean all objects created by this script. Individual project build script can not call this target; 
 * "Jar" - Compile source code and generate jars for this project.
 *          The compile dependency on other projects should be defined explicitly.
 *         eclipse.home should be passed in when Individual project build script  call this target; 
 *          the property of "failonerror" should be set true(default) when compiling source code
 * "Export" - Export the project, for instance, jar files are copied to a designated folder. 
 *            this task must be called after calling Jar task, so it needn't depend on Jar explicitly
 *
 * Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 
 *
 * Default target is "Jar".
 *
 * 
 * This script may also additional targets. These targets are private to this build script only. 
 *
 * 
 *
 * Notes:
 *  1. classpath need to be set for junit.jar
 *  2. This file now requires Ant 1.6
 *
 * Change History:
 *
 *    1. 04/15/2005: initial version
 *
-->

<project name="Sample Database UI" default="Jar" basedir=".">
	<description>BIRT Sample Database UI Plugin</description>
	<!-- set global properties for this build -->
	<!-- Public properties, used by public targets, top level build script
		     will pass on the value at runtime. Properties will have there default
		     value.

		     eclipse.home
		     utest.report.dir
		     javadoc.dir
		     plugin.version 
	-->
	<property file="../birt-build.properties" /> 
	<property name="dtp.home" location=".." />
	
	<!-- ===== Default value for public properties ============= -->
	<property name="module.name" value="org.eclipse.birt.report.data.oda.sampledb.ui"/>
	
	<property name="export.dir" value="exports"/>
	<property name="dir.bin" value="bin"/>
	<property name="dir.src" value="src"/>
	<property name="dir.utest" value="utest"/>
	<property name="oda.designer.ui.dir" location="../org.eclipse.datatools.connectivity.oda.design.ui"/>
	<property name="oda.designer.ui.jar" value="odadesignui.jar"/>
	<property name="oda.connectivity.ui.dir" location="../org.eclipse.datatools.connectivity.ui"/>
	<property name="oda.connectivity.ui.jar" value="connectivityui.jar"/>
	<property name="oda.jdbc.dir" location="../org.eclipse.birt.report.data.oda.jdbc"/>
	<property name="oda.jdbc.jar" value="oda-jdbc.jar"/>
	<property name="oda.jdbc.ui.dir" location="../org.eclipse.birt.report.data.oda.jdbc.ui"/>
	<property name="oda.jdbc.ui.jar" value="jdbcui.jar"/>
	<property name="sampledb.dir" location="../org.eclipse.birt.report.data.oda.sampledb"/>
	<property name="sampledb.jar" value="sampledb.jar"/>
	<property name="plugin.jar" value="sampledbui.jar"/>
	<property name="db.dir" value="db"/>
	<property name="db.name" value="BirtSample"/>
	<property name="oda.designer.dir" location="../org.eclipse.datatools.connectivity.oda.design"/>
	<property name="oda.designer.jar" value="odadesign.jar"/>
	
	<path id="class.path">
		<pathelement path="${dir.bin}" />

		<fileset dir="${oda.jdbc.dir}">
			<include name="${oda.jdbc.jar}"/>
		</fileset>
		<fileset dir="${oda.jdbc.ui.dir}">
			<include name="${oda.jdbc.ui.jar}"/>
		</fileset>
		<fileset dir="${sampledb.dir}">
			<include name="${sampledb.jar}"/>
		</fileset>
<!--	<fileset dir="${birt.core.dir}">
			<include name="${birt.core.jar}"/>
		</fileset>
        <fileset dir="${oda.designer.ui.dir}">
			<include name="${oda.designer.ui.jar}"/>
		</fileset>
		<fileset dir="${oda.connectivity.ui.dir}">
			<include name="${oda.connectivity.ui.jar}" /> 
		</fileset>
		<fileset dir="${oda.designer.dir}">
			<include name="${oda.designer.jar}" />
		</fileset>
-->		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.swt*/**/swt.jar" /> 
			<include name="org.eclipse.swt*.jar" /> 
		</fileset>
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.jface*/jface.jar" /> 
		</fileset>

		<!-- dependend on eclipse due to Plugin class -->
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.core.runtime_*/runtime.jar"/>
			<include name="org.eclipse.osgi_*/*.jar"/>
			<include name="org.eclipse.core.runtime*.jar"/>
			<include name="org.eclipse.osgi*.jar"/>
			<include name="org.eclipse.jface_*.jar"/>
			<include name="org.eclipse.ui*.jar"/>
			<include name="org.eclipse.emf.ecore*.jar"/>
			<include name="org.eclipse.emf.common*.jar"/>
			<include name="org.eclipse.equinox.common_*.jar"/>
			<include name="org.eclipse.datatools.connectivity*.jar"/>
            <include name="org.eclipse.datatools.connectivity*/*.jar"/>
		</fileset>
		
	</path>
	

	<!-- Compile source code and generate jar for this project.
		 Input parameters:
		 	eclipse.home

	-->
	<target name="Jar" depends="compileSource">
		<jar destfile="${plugin.jar}">
			<fileset dir="${dir.bin}">
				<include name="**/*.class" />
				<include name="**/*.txt" />
				<include name="**/*.xml" />
				<include name="**/*.def" />
				<include name="**/*.properties" />
				<exclude name="**/*Test.class" />
			</fileset>
		</jar>
	</target>
	
	<!-- Export the project, for instance, jar files are copied to a designated folder
		 the dependency on Jar should implement in top level script by call sequence	
		 Parameters:
		 		- ${export.dir} target directory to put the plugin binaries
		 		- ${plugin.version} the version of plugin exported
	 -->
	<target name="Export">
		<mkdir dir="${export.dir}" />
		<property file="META-INF/MANIFEST.MF" />
		<xmlproperty file="plugin.xml" collapseAttributes="true" />
		<antcall target="i18n" />
		<jar destfile="${export.dir}/${module.name}_${Bundle-Version}.jar" manifest="META-INF/MANIFEST.MF">
			<fileset dir="${dir.bin}">
				<include name="**/*.class" />
				<include name="**/*.txt" />
				<include name="**/*.xml" />
				<include name="**/*.def" />
				<include name="**/*.properties" />
				<exclude name="**/*Test.class" />
			</fileset>
			<fileset dir=".">
				<include name="plugin.xml" />
				<include name="plugin*.properties" />
				<include name="about.html" />
				<include name=".options" />
				<include name="META-INF/MANIFEST.MF" />
				<include name="icons/*.*"/>
			</fileset>
		</jar>
	</target>
	
	<target name="i18n">
		<native2ascii
			encoding="Cp1252"
			src="."
			dest="."
			includes="plugin_de_DE.msg" ext=".properties"/>
		<native2ascii
			encoding="Cp1252"
			src="."
			dest="."
			includes="plugin_es_ES.msg" ext=".properties"/>
		<native2ascii
			encoding="Cp1252"
			src="."
			dest="."
			includes="plugin_fr_FR.msg" ext=".properties"/>
		<native2ascii
			encoding="GBK"
			src="."
			dest="."
			includes="plugin_zh_CN.msg" ext=".properties"/>
		<native2ascii
			encoding="SJIS"
			src="."
			dest="."
			includes="plugin_ja_JP.msg" ext=".properties"/>
		<native2ascii
			encoding="MS949"
			src="."
			dest="."
			includes="plugin_ko_KR.msg" ext=".properties"/>
	</target>
	
	<!-- public task UnitTest will not explicitly depend on complie, Top level script should call compile before calling UnitTest -->
	<!-- Run Unit test.
			 Parameters:
			 		- ${utest.report.dir} target directory to put the unit test report
	-->	
	<target name="UnitTest" description="run all the unit tests" />
	
	<!-- Clean all objects created by this script -->
	<target name="Clean" description="clean up">
		<!-- Delete the ${dir.bin} and ${dir.utest} directory trees -->
		<delete dir="${dir.bin}" />
		<delete dir="${dir.utest}" />
		<delete>
			<fileset dir="." includes="*junit*" />
		</delete>
		<!-- Delete the target jar file -->
		<delete file="${plugin.jar}" />
	</target>
	
	<target name="Javadoc" />
	<target name="apiJavaDoc" />
	
	<target name="buildDependency">
		<echo message="start call Jar task in ${oda.jdbc.dir}"/>
		<ant dir="${oda.jdbc.dir}" antfile="BuildOdaJdbc.xml" target="Jar" inheritAll="false">
		 	<property name="eclipse.home" value="${eclipse.home}" />
		</ant>
		<echo message="end call Jar task in ${oda.jdbc.dir}"/>
		
		<echo message="start call Jar task in ${oda.jdbc.ui.dir}"/>
		<ant dir="${oda.jdbc.ui.dir}" antfile="BuildOdaUI.xml" target="Jar" inheritAll="false">
		  <property name="eclipse.home" value="${eclipse.home}" /> 
		</ant>
		<echo message="end call Jar task in ${oda.jdbc.ui.dir}"/>

		<echo message="start call Jar task in ${sampledb.dir}"/>
		<ant dir="${sampledb.dir}" antfile="BuildSampleDB.xml" target="Jar" inheritAll="false">
		  <property name="eclipse.home" value="${eclipse.home}" /> 
		</ant>
		<echo message="end call Jar task in ${sampledb.dir}"/>

<!--	<echo message="start call Jar task in ${oda.designer.ui.dir}"/>
		<ant dir="${oda.designer.ui.dir}" antfile="build.xml" target="build.jars" inheritAll="false">
			<property name="dtp.home" value="${dtp.home}"/>
		</ant>
		<echo message="end call Jar task in ${oda.designer.ui.dir}"/>
		
		<echo message="start call Jar task in ${oda.designer.dir}"/>
		<ant dir="${oda.designer.dir}" antfile="build.xml" target="build.jars" inheritAll="false">
			<property name="dtp.home" value="${dtp.home}"/>
		</ant>
		<echo message="end call Jar task in ${oda.designer.dir}"/>
-->	</target>
	
	<target name="compileSource" depends="buildDependency" description="compile the source ">
		<mkdir dir="${dir.bin}" />
		<copy todir="${dir.bin}">
			<fileset dir="${dir.src}">
				<include name="**/Messages*.properties"/>
			</fileset>
		</copy>
		<!-- Compile the java code from ${dir.src} into ${dir.bin} -->
		<javac srcdir="${dir.src}" 
			   destdir="${dir.bin}" 
			   encoding="utf-8" 
			   source="1.4" 
			   debug="true">
			<classpath refid="class.path" />
		</javac>
	</target>

</project>

