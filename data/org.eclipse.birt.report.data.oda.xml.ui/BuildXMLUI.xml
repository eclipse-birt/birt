<?xml version="1.0"?>
<!--
 *************************************************************************
 * Copyright (c) 2004, 2005 Actuate Corporation.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * Contributors:
 *  Actuate Corporation  - initial API and implementation
 *  
 *************************************************************************
 *
 *  Build.xml
 *
 *  Created on 11/11/2005
 *  Build script for project org.eclipse.birt.report.data.oda.XML
 *
 * 
 * The following are public targets callable by external users. 
 * 
 * "Clean" - Clean all objects created by this script. Individual project build script can not call this target; 
 * "Jar" - Compile source code and generate jar for this project.
 *          The compile dependency on other projects should be defined explicitly.
 *         eclipse.home should be passed in when Individual project build script  call this target; 
 *          the property of "failonerror" should be set true(default) when compiling source code
 * "UnitTest" - Run unit tests. This task must be called after calling Jar task, 
 *              so it needn't depend on Jar explicitly
 * "Export" - Export the project, for instance, jar files are copied to a designated folder. 
 *            this task must be called after calling Jar task, so it needn't depend on Jar explicitly
 * "JavaDoc" - generate java documents
 *
 * Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 
 *		  -Ddtp.home=<your DTP plugins source home>  [optional]
 *
 * Default target is "Jar".
 *
 * 
 * This script may also additional targets. These targets are private to this build script only. 
 *
 * 
 *
 * Notes:
 *  1. classpath need to be set for junit.jar
 *  2. This file now requires Ant 1.6
 *
 * Change History:
 *
 *    1. 11/11/2005: initial version
 *
-->

<project name="BIRT Data Engine ODA-XML Project" default="Jar" basedir=".">
	<description>BIRT Data Engine ODA-XML UI Project.</description>
	<!-- set global properties for this build -->
	<!-- Public properties, used by public targets, top level build script
		     will pass on the value at runtime. Properties will have there default
		     value.

		     eclipse.home
		     dtp.home
		     utest.report.dir
		     javadoc.dir
		     plugin.version 
	-->

	<!-- ===== Default value for public properties ============= -->
	<property name="utest.report.dir" location="utestreports" />
	<property name="javadoc.dir" location="docs/api" />
	<property name="export.dir" location="export" />
	<property name="eclipse.home" location=".." />
	<property name="dtp.home" location=".." />
	<property name="dir.utest" value="utest" />
	<property name="dir.src" value="src" />

	<property name="module.name" value="org.eclipse.birt.report.data.oda.xml.ui"/>
	<property name="dtp.oda.dir" location="${dtp.home}/org.eclipse.datatools.connectivity.oda" />
	<property name="dtp.oda.jar" value="oda.jar" />
	<property name="dtp.oda.xml.jar" value="oda-xmlui.jar" />

	<path id="class.path">
		<pathelement path="${dir.bin}" />

<!--  <fileset dir="${core.dir}">
			<include name="core.jar"/>
		</fileset>
       <fileset dir="${core.dir}/lib">
			<include name="*.jar"/>
		</fileset>
        <fileset dir="${dtp.oda.dir}">
			<include name="${dtp.oda.jar}"/>
		</fileset>
		<fileset dir="${core.dir}">
			<include name="lib/*.jar"/>
		</fileset>
-->		

		<!-- dependend on eclipse due to Plugin class
		<fileset dir="lib">
			<include name="resolver.jar"/>
			<include name="xercesImpl.jar"/>
			<include name="xml-apis.jar"/>
		</fileset>
 -->
		<!-- dependend on eclipse due to Plugin class -->
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.junit_*/*.jar"/>
			<include name="com.ibm.icu_*.jar"/>
			<include name="org.eclipse.core.runtime*.jar"/>
			<include name="org.eclipse.datatools.connectivity*.jar"/>
            <include name="org.eclipse.datatools.connectivity*/*.jar"/>
			<include name="org.eclipse.datatools.enablement.oda.xml*.jar"/>
		</fileset>

	</path>


	<!-- Compile source code and generate jar for this project.
		 Input parameters:
		 	eclipse.home
		 	dtp.home
	-->
	<target name="Jar" depends="compileSource">
		<jar destfile="oda-xml.jar">
		</jar>
	</target>

	<!-- Export the project, for instance, jar files are copied to a designated folder
		 the dependency on Jar should implement in top level script by call sequence	
		 Parameters:
		 		- ${export.dir} target directory to put the plugin binaries
		 		- ${plugin.version} the version of plugin exported
	 -->
	<target name="Export">
		<mkdir dir="${export.dir}" />
		<property file="META-INF/MANIFEST.MF" />
		<xmlproperty file="plugin.xml" collapseAttributes="true" />
		<jar destfile="${export.dir}/${module.name}_${Bundle-Version}.jar" manifest="META-INF/MANIFEST.MF">
			<fileset dir=".">
				<include name="plugin.xml" />
				<include name="plugin*.properties" />
				<include name="about.html" />
				<include name=".options" />
				<include name="META-INF/MANIFEST.MF" />
				<include name="lib/*.jar" />
				<include name="about_files/*.*"/>
			</fileset>
		</jar>
	</target>

	<!-- public task UnitTest will not explicitly depend on complie, Top level script should call compile before calling UnitTest -->
	<!-- Run Unit test.
			 Parameters:
			 		- ${utest.report.dir} target directory to put the unit test report
	-->
	<target name="UnitTest" depends="compileTest" description="run all the unit tests">

		
	</target>

	<!-- Clean all objects created by this script -->
	<target name="Clean" description="clean up">
		<!-- Delete the target jar file -->
		<delete file="oda-xmlui.jar" />
	</target>


	<!-- Generate the JavaDoc.
		 Parameters:
		 		- ${javadoc.dir} target directory to put the java document
	 -->

	<target name="Javadoc">

</target>

<!-- Generate the ApiJavaDoc.
		 -->
<target name="apiJavaDoc" />

<target name="buildDependency">

<!--<echo message="start call Jar task in ${core.dir}"/>
	<ant dir="${core.dir}" antfile="BuildCore.xml" target="Jar" inheritall="false">
		<property name="eclipse.home" value="${eclipse.home}" />
	</ant>
	<echo message="end call Jar task in ${core.dir}"/>
    <echo message="start call Jar task in ${dtp.oda.dir}"/>
	<ant dir="${dtp.oda.dir}" antfile="build.xml" target="build.jars" inheritall="false">
		<property name="eclipse.home" value="${eclipse.home}" />
	</ant>
	<echo message="end call Jar task in ${dtp.oda.dir}"/>
--></target>

<target name="compileSource" depends="buildDependency" description="compile the source ">
	
</target>


<!-- Compile Oda Test Files 
			 javac.failonerror should be true.
	-->
<target name="compileTest" depends = "compileSource" description="compile the test ">

</target>
</project>

