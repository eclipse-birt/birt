TableNameParameter=#dte_test_table#

Api.TestData1.TableName=#dte_test_table#
Api.TestData1.TableSQL=create table #dte_test_table#(col0 int, col1 int, col2 int, col3 int)
Api.TestData1.TestDataFileName=testData1.txt
Api.TestData2.TableName=#dte_test_table#
Api.TestData2.TableSQL=create table #dte_test_table#(id int, amount1 int, amount2 int, date_for_group timestamp, date_for_quarter timestamp)
Api.TestData2.TestDataFileName=testData2.txt
Api.TestData.TableName=#dte_test_table#
Api.TestData.TableSQL=CREATE TABLE #dte_test_table#(COUNTRY varchar(10), CITY varchar(10), SALE_DATE timestamp, AMOUNT int, ORDERED int, NULL_COLUMN varchar(10))
Api.TestData.TestDataFileName=testData.txt
Api.TestData.TestDataFileName1=testData1.txt
Api.TestDataCalls.TableName=Calls#dte_test_table#
Api.TestDataCalls.TableSQL= CREATE TABLE Calls#dte_test_table#( CustomerID int, CallTime timestamp, ToNumber char(20),Duration int, Charge float)
Api.TestDataCalls.TestDataFileName=testDataCalls.txt
Api.TestDataCustomer.TableName=Customer#dte_test_table#
Api.TestDataCustomer.TableSQL= CREATE TABLE Customer#dte_test_table#(CustomerID int,  Name varchar(50), Address varchar(100), CurrentBalance float) 
Api.TestDataCustomer.TestDataFileName=testDataCustomer.txt
Api.TestProcedure.ProcedureName=APP.testProc
Api.TestProcedure.ProcedureSQL=CREATE PROCEDURE APP.testProc(IN param1 INT) PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME 'org.eclipse.birt.data.engine.api.StoredProcedureTest.selectData'
Api.TestSortHint.TableName=#dte_test_table#
Api.TestSortHint.TableSQL=create table #dte_test_table#(CustomerID int, Duration int, Charge float, ToNumber bigint )

Api.TestBlobAndClob.TableName=#dte_test_table#
Api.TestBlobAndClob.TableSQL=create table #dte_test_table#( id INT, name CLOB, info BLOB )
Api.TestBlobAndClob.TestDataFileName=testBlobAndClob.txt

Api.TestNoUpdateFilter.TableName=#dte_test_table#
Api.TestNoUpdateFilter.TableSQL=create table #dte_test_table#( id int, country varchar(20), state varchar(20), city varchar(20), amount int )
Api.TestNoUpdateFilter.TestDataFileName=testNoUpdateFilter.txt

Impl.TestData1.TableName=#dte_test_table#
Impl.TestData1.TableSQL=create table #dte_test_table#(col0 int, col1 int, col2 int, col3 int)
Impl.TestData1.TestDataFileName=testData1.txt
Impl.TestData2.TableName=#dte_test_table#
Impl.TestData2.TableSQL=CREATE TABLE #dte_test_table#(CITY varchar(20),STORE varchar(20),SKU varchar(15),CATEGORY varchar(20),PRICE float,QUANTITY int,SALE_DATE timestamp,VOIDED int) 
Impl.TestData2.TestDataFileName=testData2.txt
Impl.TestData3.TableName=#dte_test_table#
Impl.TestData3.TableSQL=Create Table #dte_test_table# ("intCol" int,"bigintCol" bigInt,"smallintCol" smallint,"floatCol" float,"realCol" real,"charCol" char(10),"varcharCol" varchar(10),"textCol" varchar(100),"nvarcharcol" varchar(10),"ntextCol" varchar(100), "decimalCol" decimal, "datetimeCol" timestamp,"smalldatetimeCol" timestamp,"bitCol" int, "moneyCol" decimal,"binaryCol" varchar(10),"varbinaryCol" varchar(20))
Impl.TestData3.TestDataFileName=testData3.txt
Impl.TestJointDataSet.TableName=#dte_test_table#
Impl.TestJointDataSet.TableSQL=CREATE TABLE #dte_test_table#(ID int, CITY varchar(20),STORE varchar(20),SKU varchar(15),CATEGORY varchar(20),PRICE float,QUANTITY int,SALE_DATE timestamp,VOIDED int) 
Impl.TestJointDataSet.TestDataFileName=testJointDataSet.txt
Impl.TestIncreCacheData.TableName=IncreCacheDS
Impl.TestIncreCacheData.TableSQL=CREATE TABLE IncreCacheDS(COUNTRY varchar(10), CITY varchar(10), SALE_DATE timestamp, AMOUNT int, ORDERED int, NULL_COLUMN varchar(10))
Impl.TestIncreCacheData.TestDataFileName=testIncreCacheData.txt

Binding.TestData.TableName=#dte_test_table#
Binding.TestData.TableSQL=CREATE TABLE #dte_test_table#(COUNTRY varchar(10), CITY varchar(10), SALE_DATE timestamp, AMOUNT int, ORDERED int, NULL_COLUMN varchar(10))
Binding.TestData.TestDataFileName=testDataBinding.txt

Executor.TestData1.TableName=#dte_test_table#
Executor.TestData1.TableSQL=create table #dte_test_table#(col0 int, col1 int, col2 int, col3 int)
Executor.TestData1.TestDataFileName=testData1.txt

Perf.PerformanceTest.Rows=128000
Perf.PerformanceTest.TableName=PerformanceTest

Regre.ConnectTest.TableName=client

Regre.DB2.DriverClass=com.ibm.db2.jcc.DB2Driver
Regre.DB2.URL=jdbc:db2://192.168.218.225:50000/SPMDB_1
Regre.DB2.User=jmo
Regre.DB2.Password=Actuate8

Regre.Informix.DriverClass=com.informix.jdbc.IfxDriver
Regre.Informix.URL=jdbc:informix-sqli://192.168.218.225:1526/spmdb:INFORMIXSERVER=ol_spmdb1
Regre.Informix.User=informix
Regre.Informix.Password=informix

Regre.SQLServer.DriverClass=net.sourceforge.jtds.jdbc.Driver
Regre.SQLServer.URL=jdbc:jtds:sqlserver://192.168.218.225:1433/test
Regre.SQLServer.User=sa
Regre.SQLServer.Password=sa

Regre.MySQL.DriverClass=com.mysql.jdbc.Driver
Regre.MySQL.URL=jdbc:mysql://192.168.218.225:3306/test
Regre.MySQL.User=root
Regre.MySQL.Password=root

Regre.Oracle.DriverClass=oracle.jdbc.OracleDriver
Regre.Oracle.URL=jdbc:oracle:thin:@192.168.218.225:1521:test
Regre.Oracle.User=root
Regre.Oracle.Password=root

Regre.Postgre.DriverClass=org.postgresql.Driver
Regre.Postgre.URL=jdbc:postgresql://192.168.218.225:5432/test
Regre.Postgre.User=postgres
Regre.Postgre.Password=postgres

Regre.Sybase.DriverClass=net.sourceforge.jtds.jdbc.Driver
Regre.Sybase.URL=jdbc:jtds:sybase://192.168.218.225:5000/gui
Regre.Sybase.User=sa
Regre.Sybase.Password=

Script.DumpDataSource= testPrintln("  extensionID=" + extensionID ); \
		testPrintln("  isOpen=" + isOpen ); \
		testPrintln("  extensionProperties:"); \
		for (var i in extensionProperties) \
		  { testPrintln("    " +  "aProp"  ); }
Script.DumpDataSet= testPrintln("  extensionID=" + extensionID ); \
		testPrintln("  queryText=" + queryText ); \
		testPrintln("  row is null=" + (row == null) ); \
		testPrintln("  rows is null=" + (rows == null) ); \
		testPrintln("  dataSource.extensionID=" + (dataSource == null? "n/a" : dataSource.extensionID) ); \
		testPrintln("  extensionProperties:" ); \
		for ( var i in extensionProperties) \
		{ testPrintln("    " +  "aProp" ); } \
		testPrintln("  columnDefns:" ); \
		if (columnDefns != null ) \
		for (var i =0; i<columnDefns.length; i++)  \
		{ var c=columnDefns[i]; \
		  testPrintln("    index=" +  c.index +  ", name=" + c.name + ", type=" + c.type + \
		     ", nativeType=" + c.nativeType + ", label=" + c.label + ", alias=" + c.alias ); \
		}		    
Script.OnFetch= var success = (row.dataSet == this && this.columnDefns == columnDefns);\
	testPrintln("-->OnFetch: row[1]=" + row[1] + ". Success=" + success );


