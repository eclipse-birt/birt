#Properties file for org.eclipse.birt.core.script.bre
Bundle-Name.0 = Function Plug-in
dataType.String=String
dataType.Any=Any
dataType.DateTime=DateTime
dataType.Integer=Integer
dataType.Double=Double
dataType.Number=Number
dataType.Boolean=Boolean
dataType.DoubleArray=Double[]

FunctionDesc.charLength=Returns the number of characters in string.
FunctionDesc.concat=Returns a string concatenated by all the given strings.
FunctionDesc.indexOf=Searches for target in the string source and returns the index of first occurrence of pattern. \nSearch starts at position start. All index values are 0-based.\nIf start is omitted, a value of 0 is assumed. \nString search is case sensitive.
FunctionDesc.left=Returns the first n characters of the string str. \nIf n is 0, an empty string is returned. \nIf n is greater than the length of str, the entire string is returned. \nIf n is omitted, a value of 1 is used.
FunctionDesc.right=Returns the last n characters of the string str. \nIf n is 0, an empty string is returned. If n is greater than the length of str, the entire string is returned. \nIf n is omitted, a value of 1 is used.
FunctionDesc.search=Similar to indexOf function, except that: \n(1) string comparison is case-insensitive \n(2) pattern string can contain wildcard characters: \n* matches any sequence of characters (including empty); \n? matches any single character.
FunctionDesc.toLower=Converts all of the characters in the String source to lower case.
FunctionDesc.toUpper=Converts all of the characters in the String source to upper case.
FunctionDesc.trim=Removes all leading and trailing blank characters (space, TAB etc.).\nAlso, all consecutive blank characters are consolidated into one.
FunctionDesc.trimLeft=Removes all leading blanks. Trailing blanks and blanks between words are not removed.
FunctionDesc.trimRight=Removes all trailing blanks. Leading blanks and blanks between words are not removed.
FunctionDesc.anyOf=source is in the target range
FunctionDesc.between=TRUE if source is between target1 and target2. FALSE otherwise
FunctionDesc.notBetween=TRUE if source is not between target1 and target2. FALSE otherwise
FunctionDesc.equalTo=source is equal to target
FunctionDesc.greaterThan=source is greater than target
FunctionDesc.lessThan=source is less than target
FunctionDesc.greaterOrEqual=source is greater than or equal to target
FunctionDesc.lessOrEqual=source is less than or equal to target
FunctionDesc.notEqual=source is not equal to target
FunctionDesc.like=source matches SQL pattern target
FunctionDesc.notLike=source does not match SQL pattern target
FunctionDesc.match=source matches Javascript pattern target
FunctionDesc.compareString=compare the two strings by the specified conditions
FunctionDesc.add=Sum of the two numbers n1 and n2.
FunctionDesc.substract=n1 subtracts n2
FunctionDesc.multiple=n1 multiplies n2. This function is only used for the backward compatibility of the function "multiply".
FunctionDesc.multiply=n1 multiplies n2
FunctionDesc.divide=dividend is divided by divisor
FunctionDesc.round=Rounds a number to the specified number of digits. \ndec is an integer and can be negative. \nDefault value for dec is 0 when omitted
FunctionDesc.roundUp=Rounds a number up, away from 0, to the specified number of digits. \nDefault for dec is 0.
FunctionDesc.roundDown=Rounds a number down, toward 0, to the specified number of digits. \nDefault for dec is 0.
FunctionDesc.ceiling=Rounds a number up, away from zero, to the nearest multiple of significance.
FunctionDesc.mod=Remainder after number is divided by divisor. The result has the same sign as the divisor.
FunctionDesc.safeDivide=If the result from the dividend divided by the divisor is not zero or infinite then returns the result. \nOtherwise returns the given if Zero.
FunctionDesc.year=4-digit year number of the given date/time value
FunctionDesc.quarter=Quarter number (1 to 4) of the given date/time value
FunctionDesc.month=Month of date/time value. Option is an integer value:\n1 (default): return month number (1-12);\n2: return full month name as per user locale (e.g., January to December for English locale);\n3: return short month name as per user locale (e.g., Jan to Dec for English locale)
FunctionDesc.week=Week number of the year (1 to 52) of date/time value d.
FunctionDesc.hour=Hour of date/time value.
FunctionDesc.minute=Minute of date/time value.
FunctionDesc.second=Second of date/time value.
FunctionDesc.weekOfMonth=Week number of the month of date/time value d ( (1 to 6).
FunctionDesc.weekOfQuarter=Week number of the quarter of date/time value d ( (1 to 15).
FunctionDesc.weekOfYear=Week number of the year of date/time value d ( (1 to 52).
FunctionDesc.day=Day number of the month(1 to 31).
FunctionDesc.weekDay=Day the week. Option is an integer value\n1: return a number 1 (Sunday) to 7 (Saturday);\n2: return a number 1 (Monday) to 7 (Sunday);\n3: return a number 0 (Monday) to 6 (Sunday);\n4: return the weekday name as per user locale(e.g., Sunday to Saturday for English);\n5: return the abbreviated weekday name as per user locale(e.g.,Sun to Sat for English)
FunctionDesc.dayOfWeek=Day number of the week (1 to 7).
FunctionDesc.dayOfYear=Day number of the year (1 to 366).
FunctionDesc.dayOfQuarter=Day number of the quarter ( 1 to 92 ).
FunctionDesc.dayOfMonth=Day number of the month (1 to 31).
FunctionDesc.today=Returns a timestamp value which is midnight of the current date.
FunctionDesc.now=Returns the current timestamp.
FunctionDesc.diffYear=Return difference in number of years.
FunctionDesc.diffMonth=Return difference in number of months.
FunctionDesc.diffQuarter=Return difference in number of quarters.
FunctionDesc.diffWeek=Return difference in number of weeks.
FunctionDesc.diffDay=Return difference in number of days
FunctionDesc.diffHour=Return difference in number of hours.
FunctionDesc.diffMinute=Return difference in number of minutes.
FunctionDesc.diffSecond=Return difference in number of seconds.
FunctionDesc.addYear=Add n year(s) to the date
FunctionDesc.addMonth=Add n month(s) to the date
FunctionDesc.addQuarter=Add n quarter(s) to the date
FunctionDesc.addWeek=Add n week(s) to the date
FunctionDesc.addDay=Add n day(s) to the date
FunctionDesc.addHour=Add n hour(s) to the date
FunctionDesc.addMinute=Add n minute(s) to the date
FunctionDesc.addSecond=Add n second(s) to the date
FunctionDesc.firstDayOfYear=Returns the first day of year which the date falls.
FunctionDesc.firstDayOfQuarter=Returns the first day of quarter which the date falls.
FunctionDesc.firstDayOfMonth=Returns the first day of month which the date falls.
FunctionDesc.firstDayOfWeek=Returns the first day of week which the date falls.
FunctionDesc.fiscalYear=Returns the fiscal year for given date.
FunctionDesc.fiscalQuarter=Returns the quarter of fiscal year for given date.
FunctionDesc.fiscalMonth=Returns the month of fiscal year for given date.
FunctionDesc.fiscalWeek=Returns the week of fiscal year for given date.
FunctionDesc.fiscalDay=Returns the day of fiscal year for given date.
FunctionDesc.firstDayOfFiscalYear=Returns the first day of fiscal year which the date falls.
FunctionDesc.firstDayOfFiscalQuarter=Returns the first day of fiscal week which the date falls.
FunctionDesc.firstDayOfFiscalMonth=Returns the first day of fiscal month which the date falls.
FunctionDesc.firstDayOfFiscalWeek=Returns the first day of fiscal week which the date falls.
FunctionDesc.ddb=The depreciation of an asset for a given , single period using the double-declining balance method.
FunctionDesc.fv=the future value of an annuity based on periodic , constant payments, and on an unvarying interest rate.
FunctionDesc.ipmt=The interest payment for a given period of an annuity, \nbased on periodic , constant payments, and on an unvarying interest rate.
FunctionDesc.irr=Internal rate of return of a series of periodic cash flows, payments and receipts, in an existing array
FunctionDesc.mirr=The modified rate of return for a series of periodic cash flows (payments and receipts) in an existing array.
FunctionDesc.nper=Number of periods for an annuity based on periodic, constant payments, and on an unvarying interest rate.
FunctionDesc.npv=The net present value of a varying series of periodic cash flows, both positive and negative, at a given interest rate.
FunctionDesc.percent=Computes the percentage of the two numbers
FunctionDesc.pmt=The payment for an annuity, based on periodic , constant payments, and on an unvarying interest rate.
FunctionDesc.ppmt=The principal payment for a given period of an annuity, based on an interest rate and a constant payment schedule.
FunctionDesc.pv=The present value of an annuity based on periodic, constant payments to be paid in the future,and on an unvarying interest rate.
FunctionDesc.rate=The interest rate per period for an annuity.
FunctionDesc.sln=Straight-line depreciation of an asset for a single period.
FunctionDesc.syd=Sum-of-years'-digits depreciation of an asset for a specified period.
FunctionDesc.addDate=Returns a date that results from adding the years, months, and days to the start date.
FunctionDesc.addTime=Returns a date that results adding the hours, minutes, seconds to the start date.
FunctionDesc.subDate=Returns a date that results from subtract the years, months, and days from the start date.
FunctionDesc.subTime=Returns a date that results subtracting the hours, minutes, seconds from the start date.
FunctionDesc.days=The number of the days between two dates
FunctionDesc.hours=The number of the hours between two dates
FunctionDesc.minutes=The number of the minutes between two dates
FunctionDesc.months=The number of the months between two dates
FunctionDesc.seconds=The number of the seconds between two dates
FunctionDesc.years=The number of the years between two dates
FunctionDesc.date= Returns a Date object initialized with the given year, month, day, hours, minutes and seconds. \n(year, month, day are necessary; hours, minutes, seconds are optional) 
FunctionDesc.duration.year=Obtains the value of the YEARS field as an integer value,* or 0 if not present.\nThe lexicalDuration is the duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.month=Obtains the value of the MONTHS field as an integer value,* or 0 if not present.\nThe lexicalDuration is duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.day=Obtains the value of the DAYS field as an integer value,* or 0 if not present.\nThe lexicalDuration is duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.hour=Obtains the value of the HOURS field as an integer value,* or 0 if not present.\nThe lexicalDuration is duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.minute=Obtains the value of the MINUTES field as an integer value,* or 0 if not present.\nThe lexicalDuration is duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.second=Obtains the value of the SECONDS field as integer value,* or 0 if not present.\nThe lexicalDuration is duration string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.timeInMills=Returns the length of the duration in milli-seconds.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )\nThe startDate argument is used to disambiguate this variance
FunctionDesc.duration.isLongerThan=Checks if this lexicalDuration1 is strictly longer than another lexicalDuration2.\nFor example, "P1D"(one day) > "PT12H"(12 hours) and "P2Y" (two years) > "P23M" (23 months)
FunctionDesc.duration.isShorterThan=Checks if lexicalDuration1 is strictly shorter than another lexicalDuration2.\nFor example,"PT12H"(12 hours) < "P1D"(one day).

FunctionDesc.duration.add=Computes a new duration whose value is lexicalDuration1+lexicalDuration2.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.substract=Computes a new duration whose value is lexicalDuration1-lexicalDuration2.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.multiply=Computes a new duration whose value is factor times longer than the value of lexicalDuration.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )\nFactor is the times longer of new Duration to create
FunctionDesc.duration.negate=Returns a new Duration object whose value is -lexicalDuration.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.getSign=Returns the sign of this duration in -1,0, or 1.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.compare=Partial order relation between lexicalDuration1 and lexicalDuration2.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )
FunctionDesc.duration.addTo=Adds this duration to a Date object.\nThe lexicalDuration is the string presentation, "PnYnMnDTnHnMnS"(e.g. P5Y2M15DT4H40M20S )\nThe given Date argument is used to be modified

FunctionDesc.format=Obtains the formatted string from specified object and pattern.
