<project name="base build file" default="Start" basedir=".">
	
	<property name="eclipse.home" value=""/>
	<property name="src.dir" location="src"/>
	<property name="bin.dir" location="bin"/>
	<property name="application" value=""/>
	<property name="data.dir" value="${data.path}/${module.name}/${tests.dir}/configuration/"/>
	<property name="core.dir" value="../org.eclipse.birt.core"/>
	<property name="engine.dir" value="../org.eclipse.birt.report.engine"/>
	<property name="model.dir" value="../org.eclipse.birt.report.model"/>
	<property name="confFilePath" value=""/>
	<property name="module.name" value=""/>
	<property name="className" value=""/>
	<property name="tests.dir" value="utest"/>
	<property name="utest.report.dir" location="utestreport"/>
	
	<!-- classPath -->
	
	<path id="classPath">	
		<pathelement path="${bin.dir}"/>
		<pathelement path="${core.dir}/core.jar"/>
		<pathelement path="${model.dir}/model.jar"/>
		<pathelement path="${engine.dir}/engine.jar"/>
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.core.runtime_*/runtime.jar"/>
			<include name="org.eclipse.core.runtime*.jar"/>
			<include name="org.eclipse.osgi_*/*.jar"/>
			<include name="org.eclipse.osgi*.jar"/>
			<include name="org.junit_*/*.jar"/>
			<include name="com.ibm.icu*.jar"/>
		</fileset>
	</path>
	
	<!-- initialize, initialize BIRT plug-in testing framework -->
	
	<target name="initialize" description="initialize BIRT plug-in testing framework">
		<condition property="eclipse.home.isset">
			<isset property="eclipse.home"/>
		</condition>
		<fail unless="eclipse.home.isset" message="missing eclipse.home, build failed!"/>
		<delete dir="../${module.name}/${tests.dir}" includeEmptyDirs="true"/>
		<script language="beanshell">
	
			import java.io.File;
			import java.io.FileWriter;

			String dirTests = self.getProject().getProperty("tests.dir");
			String eclipseHome = self.getProject().getProperty("eclipse.home").replace( '\\', '/' );
			String moduleName = self.getProject().getProperty("module.name");
			String basedir = self.getProject().getProperty("basedir");

			String currWorkspacePath = null;
			String currPluginAbsolutePath = null;
			String currConfAbsolutePath = null;
			File currConfFolder = null;
			File currDevPropFile = null;
			File currConfigIniFile = null;
			File currUpdateFolder = null;
			File currPlatformXmlFile = null;
			File pluginPathInEclipse = null;
			File[] allPluginsInEclipse = null;
			File[] allPlugins = null;
			
			void createUnitTestFramework()
			{
				/*
				Create the Framework for the UnitTest, including:
				workspace-folder/										... $currWorkspacePath
					|-	plugin-folder/
							|-  ${utest.report.dir}/
							|-	${tests.dir}/
									|-	configuration/					... $currConfFolder
											|-	dev.properties			... $currDevPropFile
											|-	config.ini				... $currConfigIniFile
											|-	org.eclipse.update/		... $currUpdateFolder
													|-	platform.xml	... $currPlatformXmlFile
				*/

				currWorkspacePath = basedir.substring(0 , basedir.lastIndexOf("\\"));
				currPluginAbsolutePath = currWorkspacePath + "\\" + moduleName;
				currConfAbsolutePath = currPluginAbsolutePath + "\\" + dirTests + "\\configuration";
			
				//1.create folder: configuration/
				currConfFolder = new File(currConfAbsolutePath);
				currConfFolder.mkdirs();
		
				//2.create file: dev.properties
				currDevPropFile = new File(currConfFolder , "dev.properties");
				currDevPropFile.createNewFile();
			
				//3.create file: config.ini
				currConfigIniFile = new File(currConfFolder , "config.ini");
				currConfigIniFile.createNewFile();
			
				//4.create file: platform.xml(including related folders)
				currUpdateFolder = new File(currConfFolder , "org.eclipse.update");
				currUpdateFolder.mkdirs();
				currPlatformXmlFile = new File(currUpdateFolder , "platform.xml");
				currPlatformXmlFile.createNewFile();
			}
			
			void createDevProperties()
			{
				FileWriter devPropWriter = new FileWriter( currDevPropFile );
				allPlugins = new File(currWorkspacePath).listFiles( );
				String tPluginName = null;
				File libFile = null;
				File[] allFilesInLib = null;
				int index = 0;
				/*
					list all the birt plugins in workspace folder
					and assume that all plugins are in folder-form, not single jar
				*/
				while ( index != allPlugins.length )
				{
					if(allPlugins[index].isDirectory())
					{
						tPluginName = allPlugins[index].getName( );
						if ( !tPluginName.startsWith( "." ) )
						{
							devPropWriter.write( tPluginName );
							devPropWriter.write( "=" );
							devPropWriter.write( currWorkspacePath.replace( '\\', '/' ) );
							devPropWriter.write( "/" );
							devPropWriter.write( tPluginName );
							devPropWriter.write( "/" );
							devPropWriter.write( "bin" );			
							allChildren = allPlugins[index].listFiles( );
				
							int childrenIndex = 0;
							while ( childrenIndex != allChildren.length )
							{
								if ( "lib".equalsIgnoreCase( allChildren[childrenIndex].getName( ) ) )
								{
									libFile = allChildren[childrenIndex];
									allFilesInLib = libFile.listFiles( );
									int filesIndex = 0;
									while ( filesIndex != allFilesInLib.length )
									{
										if ( allFilesInLib[filesIndex].getName( ).endsWith( ".jar" ) )
										{
											devPropWriter.write( "," );
											devPropWriter.write( currWorkspacePath.replace( '\\', '/' ) );
											devPropWriter.write( "/" );
											devPropWriter.write( tPluginName );
											devPropWriter.write( "/" );
											devPropWriter.write( "lib/" );
											devPropWriter.write( allFilesInLib[filesIndex].getName( ) );
										}
										filesIndex++;
									}
								}
								childrenIndex++;
							}
							devPropWriter.write( "\n" );
						}
					}
				index ++;
				}
			devPropWriter.close( );
			}
			
			String getPluginName(File[] allPlugins , String splittedName)
			{
				int index = 0;
				splittedName = splittedName + "_";
				while(index != allPlugins.length)
				{
					if(allPlugins[index].getName().indexOf(splittedName) != -1)
					{
						return allPlugins[index].getName();
					}
					index ++;
				}
			}
			
			void createConfigIni()
			{
				pluginPathInEclipse = new File( eclipseHome + "/plugins/" );
				allPluginsInEclipse = pluginPathInEclipse.listFiles( );
				FileWriter confIniWriter = new FileWriter( currConfigIniFile );
				confIniWriter.write( "osgi.bundles=reference\\:file\\:" );
				confIniWriter.write( eclipseHome );
				confIniWriter.write( "/plugins/" );
				/*
					Here need to search following plugin names:
						- org.eclipse.equinox.common
						- org.eclipse.core.jobs
						- org.eclipse.equinox.registry
						- org.eclipse.equinox.preferences
						- org.eclipse.core.contenttype
						- org.eclipse.core.runtime
						- org.eclipse.update.configurator
						- org.eclipse.osgi
						- org.eclipse.platform
				*/
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.equinox.common"));
				confIniWriter.write("/@2\\:start,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.core.jobs"));
				confIniWriter.write("/@2\\:start,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.equinox.registry"));
				confIniWriter.write("/@2\\:start,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.equinox.preferences"));
				confIniWriter.write("/,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.core.contenttype"));
				confIniWriter.write("/,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.core.runtime"));
				confIniWriter.write("/@2\\:start,reference\\:file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.update.configurator"));
				confIniWriter.write("/@3\\:start\n");
				confIniWriter.write("osgi.bundles.defaultStartLevel=4\n");
				confIniWriter.write("osgi.install.area=file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("\n");
				confIniWriter.write("osgi.framework=file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.osgi"));
				confIniWriter.write("/\n");
				confIniWriter.write("osgi.configuration.cascaded=false\n");
				confIniWriter.write("osgi.splashPath=file\\:");
				confIniWriter.write(eclipseHome);
				confIniWriter.write("/plugins/");
				confIniWriter.write(getPluginName(allPluginsInEclipse , "org.eclipse.platform"));
				confIniWriter.write("/\n");
				confIniWriter.write("eclipse.product=org.eclipse.sdk.ide\n");
				confIniWriter.write("osgi.dev=file:");
				confIniWriter.write(currPluginAbsolutePath.replace( '\\','/' ));
				confIniWriter.write("/");
				confIniWriter.write(dirTests);
				confIniWriter.write("/configuration/dev.properties\n");
				confIniWriter.close();
			}
			
			void createPlatformXml()
			{
				FileWriter pltXmlWriter = new FileWriter( currPlatformXmlFile );
				pltXmlWriter.write("\074?xml version=\"1.0\" encoding=\"UTF-8\"?\076");
				pltXmlWriter.write("\074config version=\"3.0\" date=\"1143789877140\" transient=\"true\"\076");
				pltXmlWriter.write("\074site url=\"file:/");
				pltXmlWriter.write( currWorkspacePath.replace( '\\','/' ) + "/");
				pltXmlWriter.write("\" enabled=\"true\" updateable=\"true\" policy=\"USER-INCLUDE\" list=\"");
		
				int index = 0;
				while ( index != allPlugins.length )
				{
					if ( !allPlugins[index].getName( ).startsWith( "." ) )
					{
						if ( index != 0 )pltXmlWriter.write( "," );
						pltXmlWriter.write( "\n" );
						pltXmlWriter.write( allPlugins[index].getName( ) );
						pltXmlWriter.write( "/" );
					}
					index++;
				}
			
				pltXmlWriter.write( "\"\076" );
				pltXmlWriter.write( "\074/site\076" );
				pltXmlWriter.write( "\074site url=\"file:/" );
				pltXmlWriter.write( eclipseHome );
				pltXmlWriter.write( "/plugins/" );
				pltXmlWriter.write( "\" enabled=\"true\" updateable=\"true\" policy=\"USER-INCLUDE\" list=\"" );
				
				index = 0;
				while ( index != allPluginsInEclipse.length )
				{
					if ( index != 0 )pltXmlWriter.write( "," );
					pltXmlWriter.write( "\n" );
					pltXmlWriter.write( allPluginsInEclipse[index].getName( ) );
					if ( allPluginsInEclipse[index].isDirectory( ) )
					{
						pltXmlWriter.write( "/" );
					}
					index++;
				}
			
				pltXmlWriter.write( "\"\076" );
				pltXmlWriter.write( "\074/site\076" );
				pltXmlWriter.write( "\074/config\076" );
				pltXmlWriter.close();
			}
			
			void initconfFilePath()
			{
				String confFilePath = "file:" + currPluginAbsolutePath.replace('\\' , '/') + "/" + dirTests + "/configuration";
				self.getProject().setProperty("confFilePath" , confFilePath);
			}
			
			createUnitTestFramework();
			createDevProperties();
			createConfigIni();
			createPlatformXml();
			initconfFilePath();
				
		</script>

	</target>
	
	<!-- compile Test, compile this project -->
	
	<target name="compileTest" description="compile this project">
		<mkdir dir="${bin.dir}"/>
		<echo message="start compiling tests.core"/>
		<javac srcdir="${src.dir}" destdir="${bin.dir}" source="1.4" target="1.4" debug="true" encoding="utf-8" failonerror="true">
			<classpath refid="classPath"/>
		</javac>
		<echo message="end compiling tests.core"/>
	</target>
	
	<!-- Start, start plug-in test(s) -->
	
	<target name="Start" depends="initialize" description="start plug-in test(s)">
		<java className="org.eclipse.core.launcher.Main" fork="true" dir="${eclipse.home}" maxmemory="512m" timeout="3600000">
			<classpath>
				<pathelement location="${eclipse.home}/startup.jar"/>
			</classpath>
			<arg line="-application ${application}"/>
			<arg line="-data ${data.dir}"/>
			<arg line="-configuration ${confFilePath}"/>
			<arg line="-testPluginName ${module.name}"/>
			<arg line="-className ${className}"/>
			<arg line="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,&quot;${utest.report.dir}/${module.name}.xml&quot;"/>
			<!-- system properties for tests.viewer -->
			<sysproperty key="catalina.home" value="${catalina.home}"/>
			<sysproperty key="server" value="${server}"/>
			<sysproperty key="runtime" value="${runtime}"/>
		</java>
		<delete dir="../${module.name}/${tests.dir}" includeEmptyDirs="true"/>
	</target>
	
</project>
