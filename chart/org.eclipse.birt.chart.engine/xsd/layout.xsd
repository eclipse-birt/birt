<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.birt.eclipse.org/ChartModelLayout" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:chart="http://www.birt.eclipse.org/ChartModel" xmlns:attribute="http://www.birt.eclipse.org/ChartModelAttribute" xmlns:component="http://www.birt.eclipse.org/ChartModelComponent" xmlns:data="http://www.birt.eclipse.org/ChartModelData" xmlns="http://www.birt.eclipse.org/ChartModelLayout" xmlns:type="http://www.birt.eclipse.org/ChartModelType">
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModel" schemaLocation="model.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelAttribute" schemaLocation="attribute.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelComponent" schemaLocation="component.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelData" schemaLocation="data.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelType" schemaLocation="type.xsd"/>
	<xsd:complexType name="Plot">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Plot represent the rectangular area in a chart, inside where the graph of its datapoints is displayed. 
It extends to the client area of a chart's block excluding the title and legend.  Plot is a sub-type of Block, 
and exists as a child block of the chart's block in a chart's model.  
<p>
Besides the general approach of using Chart.getBlock( ).getChildren( ) we can also access it using the 
convenient method: Chart.getPlot( );
</p></xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="Block">
				<xsd:sequence>
					<xsd:element name="HorizontalSpacing" type="xsd:int" default="5">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "VerticalSpacing" specifies the vertical spacing between elements in the plot.  
For chart with axes, it represents the space in points between the horizontal axes and the graph 
of the datapoints.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="VerticalSpacing" type="xsd:int" default="5">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "VerticalSpacing" specifies the vertical spacing between elements in the plot.  
For chart with axes, it represents the space in points between the vertical axes and the graph 
of the datapoints.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ClientArea" type="ClientArea">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "ClientArea" represents the valid rectangular area of a plot 
block to lay out its content.  It extends the whole block excluding the 
margin of the block, which is defined by "Insets".  It also holds a group of 
properties to specify how this area will be rendered, including its background, 
outline, visibility... and so on.
<p>
For chart with axes it represents the area within axes. <br/> 
For chart without axes it will be split into cells, with each cell for one single series.
</p>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="Legend">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Legend represents the rectangular area in chart, where its legends are displayed.  It holds also a 
group of attributes and elements to specify how the legend items are laid out and displayed. 
The legend items usually describe either the series or categories, depeding on the chart type.
Legend is a sub-type of Block, and exists as a child block of the chart's block in a chart's model.  
<p>
Besides the general approach of using Chart.getBlock( ).getChildren( ) we can also access it using the 
convenient method: Chart.getLegend( );
</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="Block">
				<xsd:sequence>
					<xsd:element name="HorizontalSpacing"
						type="xsd:int">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "HorizontalSpacing" represents the horizontal spacing 
in points between elements in the legend, namely legend items.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="VerticalSpacing"
						type="xsd:int">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "VerticalSpacing" represents the vertical spacing in
points between elements in the legend, namely legend items.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ClientArea" type="ClientArea">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "ClientArea" represents the valid rectangular area of a legend 
block to lay out legned items, it extends the whole block excluding the 
margin of the block, which is defined by "Insets". It also holds a group of 
properties to specify how this area will be rendered, including its background, 
outline, visibility... and so on.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Text" type="attribute:Text">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "Text" of Legend holds the Font and Color properties for all legend items.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Orientation"
						type="attribute:Orientation" default="Vertical">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "orientation" specifies the layout orientation of legend 
items inside one legend group.  It can be Vertical or Horizontal, which 
means the legend items will be laid out in top-down or left-right 
direction respectively.
<p>
In case of colored by series, all legend items related with the same 
designtime series belong to the same group, therefore if no y-optional 
grouping is defined each group contains only one legend item, otherwise 
more than one legned items.<br/>
In case of colored by category, all legend items belong to one group.
</p>
						</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Direction" 
						type="attribute:Direction" default="Top_Bottom">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "direction" specifies the layout direction of legend groups if 
there are more than one legend groups.  It can be Left_Right or 
Top_Bottom, which means the legend groups will be laid out in left-right 
or top-down direction respectively.
<p>
In case of colored by series, all legend items related with the same 
designtime series belong to the same group, therefore if no y-optional 
grouping is defined each group contains only one legend item, otherwise 
more than one legned items.<br/>
In case of colored by category, all legend items belong to one group.
</p>
</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Separator"
						type="attribute:LineAttributes">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "Separator" specifies the graphical attributes of the seperate line between legend groups. 
<p>
In case of colored by series, all legend items related with the same 
designtime series belong to the same group, therefore if no y-optional 
grouping is defined each group contains only one legend item, otherwise 
more than one legned items.<br/>
In case of colored by category, all legend items belong to one group.
</p></xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Position"
						type="attribute:Position" default="Right">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "position" specifies the position of the legend relative to the plot block 
of the chart, it can be Above, Below, Left, Right and Inside. If Inside is selected, 
the legend block will be displayed in the middel of the plot block and overlapped 
with it.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ItemType"
						type="attribute:LegendItemType">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "ItemType" specifies whether the datapoints and the legend items are 
colored by category or series pallet.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Title" type="component:Label"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Element "Title" of type Label specifies the content and graphical 
properties of the title of the legend block.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="TitlePosition"
						type="attribute:Position" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Attribute "TitlePosition" specifies the position of the legend title 
inside the legend block.  It can be Above, Below, Left and Right - 
by default it's Above.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ShowValue" type="xsd:boolean"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The boolean attribute "ShowValue" specifies whether a descriptive value of 
the related series will be displayed under the legend item, normally this value 
will be the first value in the series.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ShowPercent" type="xsd:boolean"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>This attribute is not currently used.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ShowTotal" type="xsd:boolean"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>This attribute is not currently used.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="WrappingSize" type="xsd:double"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Attribute "WrappingSize" specifies the behavior of automatically wrapping the 
legend items text into multiple lines when lacking in display space. Value zero 
means this feature is disabled, a positive value represents the maximal width 
of the text in points. 
	</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="MaxPercent" maxOccurs="1"
						minOccurs="0" type="xsd:double" default="0.33333333">

						<xsd:annotation>
							<xsd:documentation>Attribute "MaxPercent" specifies the maximal percent of space which the
legend can take from the whole chart block. By default, it's 0.33333333,
which means the legend block will either be dropped or occupy less than 
33.3% space of the whole chart block.
							</xsd:documentation>
						</xsd:annotation>

					</xsd:element>
					<xsd:element name="TitlePercent" minOccurs="1"
						maxOccurs="1" default="0.6">
						<xsd:annotation>
							<xsd:documentation>Attribute "TitlePercent" specifies the maximal percent of space which the
legend title can take from the whole legend block. By default, it's 0.6, 
which means the legend title will either be dropped or occupy less than 
60% space of the whole legend block.

							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:restriction base="xsd:double">
								<xsd:minInclusive value="0"></xsd:minInclusive>
								<xsd:maxInclusive value="1"></xsd:maxInclusive>
							</xsd:restriction>
						</xsd:simpleType>
					</xsd:element>
					<xsd:element name="Ellipsis" minOccurs="1" maxOccurs="1" default="1">
                        <xsd:annotation>
                        	<xsd:documentation>Int attribute "Ellipsis" specifies the behavior of shortening the legend item's 
text with ellipsis if there is not enough space to display the whole text. Value
0 indicates that the feature is disabled, and the legend item will either be displayed 
with whole text or be dropped. A positive value n represents the minimal count 
of characters to be displayed before the ellipsis, which means the legend item 
will either be dropped or be displayed with at least n characters.
                        	</xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                        	<xsd:restriction base="xsd:int">
                        		<xsd:minInclusive value="0"></xsd:minInclusive>
                        	</xsd:restriction>
                        </xsd:simpleType>
					</xsd:element>
					<xsd:element name="FormatSpecifier"
						type="attribute:FormatSpecifier" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                        	<xsd:documentation>Element "FormatSpecifier" specifies how the legend item text will be formated.</xsd:documentation>
                        </xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="LabelBlock">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">LabelBlock is a sub-type of Block, which is specialized for laying out a text  
in the chart for general purpose. It contains a Label, which holds the content 
and graphical properties of the text to be rendered.  Following example shows
how to add a arbitrary text "Sample Text" to a chart: 
<p>
		Chart cm = ....<br/>
		LabelBlock lbBlock = (LabelBlock) LabelBlockImpl.create( );<br/>
		lbBlock.getBounds( ).set( 50, 50, 100, 100 );<br/>
		lbBlock.getLabel( ).getCaption( ).setValue( "Sample Text" );<br/>
		cm.getBlock( ).getChildren( ).add( lbBlock );
</p></xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="Block">
				<xsd:sequence>
					<xsd:element name="Label" type="component:Label" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "Label" of type Label specifies the content and graphical 
properties of the text to be laid out and rendered within the block.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="TitleBlock">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">TitleBlock is a special sub-type of LabelBlock, which devotes itself to representing the title of the chart.
<p>
Besides the general approach of using Chart.getBlock( ).getChildren( ) we can also access it using the 
convenient method: Chart.getTitle( );
</p></xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="LabelBlock">
				<xsd:sequence>
					<xsd:element name="Auto" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>Attribute "Auto" of type boolean specifies whether the  text of the TitleBlock 
could be automatically determined by the system.</xsd:documentation>
						</xsd:annotation></xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="Block">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Block is the most important component to layout the contents of a chart.
It represents a rectangular area that bounds an individual chart element, which is used
to determine the layout of the chart.  The user can define its Bounds, Insets, Outline and 
Background among other properties. A Block can also contain other Blocks as its children. 
Use Block.getChildren( ) which returns a list of type Block to navigate through 
the children hierarchy of Blocks.
<p>
The most important block is the chart's block, all contents of a chart 
are rendered inside this block, we can get the instance of a chart's block using:<br/>
Chart.getBlock( );
</p>
A chart graphically consists of 3 parts, TitleBlock, Plot and Legend, which are 
also sub-type of Block and organized as children of the chart's Block.  Besides the general 
approach of using Chart.getBlock( ).getChildren( ) we can also access them using the 
convenient methods:<br/>
Chart.getTitle( );<br/>
Chart.getPlot( );<br/>
Chart.getLegend( );<br/>
</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Children" type="Block"
				maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation xml:lang="en"></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Bounds" type="attribute:Bounds"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Bounds" represents the size of a block and the its position insides its container.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Anchor" type="attribute:Anchor"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Aattribute "Anchor" specifies the position of the block inside its container.  </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Stretch" type="attribute:Stretch"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Stretch" specifies how the content of the block fills up available space.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Insets" type="attribute:Insets"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Insets" represents the size of the margin between the block's edge and its client area.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Row" type="xsd:int" default="-1">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Row" represents the row index for the block, by default it's -1.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Column" type="xsd:int" default="-1">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Column" the column index for the block, by default it's -1.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Rowspan" type="xsd:int" default="-1">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Rowspan" represents the rowspan value for the block, by default it's -1.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Columnspan" type="xsd:int" default="-1">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Columnspan" represents the columnspan value for the block, by	default it's -1.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="MinSize" type="attribute:Size">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "MinSize" represents the minimum size for the block.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Outline"
				type="attribute:LineAttributes">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "outline" of type LineAttributes specifies how to render the block's outline.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Background" type="attribute:Fill"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "background" of type Fill specifies how to render the background of the Block. 
Can be transparent, a solid color, a gradient or image</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Visible" type="xsd:boolean" default="true">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Visible" specifies whether the block is visible.  By default it's true.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Triggers" type="data:Trigger"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="WidthHint" type="xsd:double" default="-1"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>WidthHint specifies a hinted width for the block.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="HeightHint" type="xsd:double"
				default="-1" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>HeightHint pecifies a hinted height for the block.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Cursor" type="attribute:Cursor" maxOccurs="1" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Element "Cursor" represents cursor for the block.</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ClientArea">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">ClientArea holds a group of graphical properties for Plot and Legend to specify how to render 
their client area, the properties include background, outline, visible... and so on.
</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Background" type="attribute:Fill">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "background" of type Fill specifies how to render the background of the client area. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Outline" type="attribute:LineAttributes">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Outline" of type LineAttributes specifies how to render the outline of the client area.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ShadowColor" type="attribute:ColorDefinition">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "ShadowColor" of type ColorDefinition specifies the shadow color for the client area.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Insets" type="attribute:Insets">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Insets" represents the size of the margin between the client area's edge and its client area.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Visible" type="xsd:boolean" default="true">
				<xsd:annotation>
					<xsd:documentation>Attribute "Visible" specifies whether client area is visible.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
