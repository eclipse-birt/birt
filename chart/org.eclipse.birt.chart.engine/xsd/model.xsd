<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.birt.eclipse.org/ChartModel" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.birt.eclipse.org/ChartModel" xmlns:attribute="http://www.birt.eclipse.org/ChartModelAttribute" xmlns:component="http://www.birt.eclipse.org/ChartModelComponent" xmlns:data="http://www.birt.eclipse.org/ChartModelData" xmlns:layout="http://www.birt.eclipse.org/ChartModelLayout" xmlns:type="http://www.birt.eclipse.org/ChartModelType">
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelAttribute" schemaLocation="attribute.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelComponent" schemaLocation="component.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelData" schemaLocation="data.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelLayout" schemaLocation="layout.xsd"/>
	<xsd:import namespace="http://www.birt.eclipse.org/ChartModelType" schemaLocation="type.xsd"/>
	<xsd:annotation>
		<xsd:documentation xml:lang="en">
		Schema file for the chart.model package.
		</xsd:documentation>
	</xsd:annotation>
	<xsd:complexType name="Chart">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Chart is the basic type from which all charts should be extended. It defines the basic elements that are 
expected to be present for all charts. Class Chart is de facto abstract - never instantiate the class Chart, 
instantiate one of its extended class ChartWithAxes, ChartWithoutAxes or DialChart instead.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Version" type="xsd:string"
				default="1.0.0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Version" specifies the version number of this chart.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Type" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">The String attribute "Type" specifies the type of this chart, it 
can be "Bar Chart",  "Line Chart", "Pie Chart" ...  etc.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="SubType" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "SubType" specifies the sub-type of a chart in respect of 
a certain type, e.g. for a chart of type "Bar Chart", the candidates  
for sub-type are "Side-by-side", "Staced" and "Percent Stacked".
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Description" type="attribute:Text"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Description" holds a descriptive text of the chart, 
which could be used as tooltip value for example.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Block" type="layout:Block">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "Block" of type Block represents main block of a chart, which 
defines a rectangular area to render and to layout its content inside it, 
and also holds the graphical properties of the chart's background and 
properties for interaction like triggers and cursor.

					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Dimension"
				type="attribute:ChartDimension" default="Two_Dimensional">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Dimension" specifies the dimensions of the chart, it 
can be "Two Dimensional", "Two Dimensional With Depth" or 
"Three Dimensional". </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Script" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">The string attribute "Script" holds the script for the chart.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Units" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "Units" holds the units of measurement for the model, 
it can be points, pixels, mm... etc.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="SeriesThickness" type="xsd:double"
				minOccurs="0" default="10">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "SeriesThickness" is used in case of charts with depth (2.5D), it specifies the depth of the wall and 
floor in points for chart with axes, and the depth of the pie chart.  By default it's 10.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="GridColumnCount" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Attribute "GridColumnCount" is mostly used for charts without axes 
containing multiple series, in which case the chart's plot area is split 
into multiple cells with each cell representing a series, and 
"GridColumnCount"  specifies the number of columns to layout the 
split cells. By default, it's zero, and means that the column number 
will be automatically adjusted due to the aspect ratio of the plot 
area.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="ExtendedProperties"
				type="attribute:ExtendedProperty" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">The list element "ExtendedProperties" holds a generic list of 
properties (as	name-value pairs) for minor extensions to the
chart.  The preferred way to add properties remains through 
modification of schema. To set of get a certain extended 
property, following convenient static methods are defined 
in class org.eclipse.birt.chart.util.ChartUtil.
<p>
ExtendedProperty setExtendedProperty( Chart cm,
			String propertyName, String propertyValue )<br/>
ExtendedProperty getExtendedProperty( Chart cm, 
String propertyName )
</p>
</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="SampleData" type="data:SampleData"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Element "SampleData" holds a collection of sample values for 
use by 	the chart.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Styles" type="attribute:StyleMap"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element "Styles" holds a collection of style maps for use by the chart.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="Interactivity"
				type="attribute:Interactivity">
				<xsd:annotation>
					<xsd:documentation>Element "Interactivity" holds the settings for interactive features.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="EmptyMessage" type="component:Label" maxOccurs="1" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Element "EmptyMessage" provides the message text to be displayed 
in the place of plot area when the chart contains no data. By default,
it's visibility is false, which indicates if the chart contains 	no data, the 
whole chart will be hidden, and no label will be shown.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!--	Chart With Axes	-->
	<xsd:complexType name="ChartWithAxes">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">ChartWithAxes represents a chart with axes. (e.g. Bar Chart, Line Chart, etc).  
<p>
To create an instance use the factory method:<br/>
ChartWithAxesImpl.create( );
</p>
At the moment only charts with one single base axis are supported, while one or 
more orthogonal axes can be associated with the base axis.  In case of 3D charts, 
the z-axis is defined as an ancillary axis of the base axis. 
<p>
Following examples show the ways to retrieve the base axis of an 
instance of ChartWithAxes :<br/>
ChartWithAxes cwa...<br/>
Axis axBase = cwa.getAxes( ).get( 0 );<br/>
or<br/>
Axis axBase = cwa.getAxes( ).getPrimaryBaseAxes( )[0];
</p>
<p>
To retrieve the primary orthogonal axis associated with the base axis use:<br/>
<br/>
Axis axOrth = getPrimaryOrthogonalAxis( axBase );<br/>
<br/>
To retireve all the orthogonal axes associated with the base axis use in/exclude 
the primary one use:<br/>
<br/>
Axis[] axOrths =  getOrthogonalAxes( axBase, bIncludePrimary );
<br/>
To retrieve the z-axis use:
Axis axAnci = getAncillaryBaseAxis( axBase );
</p>
</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="Chart">
				<xsd:sequence>
					<xsd:element name="Axes" type="component:Axis"
						maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">This element represents the base axes of 
the chart. Although this is a list of axes, at the moment only charts with one single base axis 
are supported.
<p>
Following examples show the ways to retrieve the base axis of an 
instance of ChartWithAxes :<br/>
ChartWithAxes cwa...<br/>
Axis axBase = cwa.getAxes( ).get( 0 );<br/>
or<br/>
Axis axBase = cwa.getAxes( ).getPrimaryBaseAxes( )[0];
</p>
	</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="WallFill"
						type="attribute:Fill">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "WallFill" specifies how to fill the wall of a chart's graphic 
in case of chart with depth.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="FloorFill"
						type="attribute:Fill">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Element "FloorFill" specifies how to fill the floor of a chart's graphic 
in case of chart with depth.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Orientation"
						type="attribute:Orientation" default="Vertical">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "Orientation" specifies whether the chart is a vertical 
or horizontal chart, more precisely the orhogonal axes are 
vertical/horizontal.
<p>
To set/get this attribute conveniently, the instance methods 
of ChartWithAxes "setTransposed" and "isTransposed" can be 
used:<br/>
	void setTransposed( boolean bTransposed );<br/>
	boolean isTransposed( );
</p>
A chart is transposed means its orientation is horizontal.
			</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="UnitSpacing"
						type="attribute:Percentage" default="50">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">Attribute "UnitSpacing" specifies the spacing between the last
series element of one unit and the first series element of the 
next unit in the chart. This should be specified as a percentage.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Rotation"
						type="attribute:Rotation3D" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Element "Rotation" of type Rotation3D is used for 3D charts, 
it specifies how many degrees the chart graphic is rotated 
around each of the three axes.<br/>
The following example will set a 3D chart to be rotated -20 degrees 
around x-axis, 45 degrees around y-axis and 0 degrees around 
z-axis:
<p>
ChartWithAxes cwa = ...<br/>
Angle3D a3D = cwa .getRotation( ).getAngles( )	.get( 0 );<br/>
a3D.set( -20, 45, 0 );<br/>
</p>							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="ReverseCategory"
						type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>The boolean attribute "ReverseCategory" specifies if the 
categories are in reverse order. 
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="StudyLayout" type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>The boolean attribute "StudyLayout" specifies whether multiple Y 
axes are laid out as a Study Chart.</xsd:documentation>
						</xsd:annotation></xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--	Chart Without Axes	-->
	<xsd:complexType name="ChartWithoutAxes">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">ChartWithoutAxes represents a chart without any axis. (e.g. Pie Chart, Dial Chart, etc).  
<p>
To create an instance use the factory method:<br/>
ChartWithoutAxesImpl.create( );
</p>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="Chart">
				<xsd:sequence>
					<xsd:element name="SeriesDefinitions"
						type="data:SeriesDefinition" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">The element "SeriesDefinitions" represents the defined category 
SeriesDefinition.  At the moment only one single category Series- 
Definition is supported, while one or multiple value SeriesDefinitions 
can be associated with the category SeriesDefinition.
The following example shows how to retrieve the category 
series definition of a chart without axes:
<p>
ChartWithoutAxes cwoa =...<br/>
SeriesDefinition sdCategory = cwoa.getBaseSeriesDefinition( );
</p>
<p>
To retrieve all value SeriesDefinitions use:<br/>
List&lt;SeriesDefinition&gt; sdValues = cwoa.getOrthogonalSeriesDefinitions( );
</p>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="MinSlice" type="xsd:double"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The concept "min slice" is used for Pie-like charts, by which 
datapoints are displayed as slices of a whole graph, the size 
of the slices corresponds the value's percentage of the 
summary.  The attribute "MinSlice" of type double specifies 
the threshold value of slices. A separate slice will be created 
for each datapoint whose value is greater than this threshold, 
and all values less than the threshold will be aggregated into 
one single slice called "min slice".							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="MinSlicePercent"
						type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>The boolean attribute indicates whether the MinSlice value is 
defined as a percentage.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="MinSliceLabel"
						type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>The string attribute "MinSliceLabel" specifies the label text 
of the MinSlice.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="Coverage">
                        <xsd:annotation>
                        	<xsd:documentation>Attribute "Coverage" specifies the percentage of size that the chart 
graphics (pie or dial) takes from the client area of the plot. By default 
it's not set, which means the size will be auto adjusted.
                        	</xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
							<xsd:restriction base="xsd:double">
								<xsd:minInclusive value="0"></xsd:minInclusive>
								<xsd:maxInclusive value="1"></xsd:maxInclusive>
							</xsd:restriction>
						</xsd:simpleType>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!--	Dial Chart-->
	<xsd:complexType name="DialChart">
        <xsd:annotation>
        	<xsd:documentation>DialChart represent a special type of ChartWithoutAxes class that contains information specific to dials.
<p>
To create an instance use the factory method:<br/>
DialChartImpl.create( );
</p>		</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:extension base="ChartWithoutAxes">
				<xsd:sequence>
					<xsd:element name="DialSuperimposition" type="xsd:boolean" default="true" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>The boolean attribute "DialSuperimposition" specifies whether all 
dials are superimposed on one another, or laid out in separate cells.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
</xsd:schema>
