<!--
 *******************************************************************************
 * Copyright (c) 2021 Contributors to the Eclipse Foundation
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   See git history
 *******************************************************************************
-->
<project name="Build specific targets and properties" default="noDefault">

	<property name="package.version" value="2_2_0" />
	<property name="archiveName"
		value="birt-report-framework-sdk-${package.version}.zip" />
	<property name="archiveFullPath"
		value="${buildDirectory}/${buildLabel}/${archiveName}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->

	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.birt.sdk" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations -->
	<!-- ===================================================================== -->
	<target name="assemble.org.eclipse.birt.sdk">
		<antcall target="assemble" />
	</target>

	<target name="assemble">
		<ant antfile="${assembleScriptName}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/releng/maps" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

		<!-- *** change the repo info -->
		<property name="mapCvsRoot"
			value=":pserver:anonymous@dev.eclipse.org:/cvsroot/birt" />
		<property name="mapVersionTag" value="HEAD" />

		<cvs cvsRoot="${mapCvsRoot}" package="source/org.eclipse.birt.releng"
			dest="${buildDirectory}/maps" tag="${mapVersionTag}" />

		<!--compare the map files project -->
		<antcall target="compareMapFiles" />
		<!--tag the map files project -->
		<antcall target="tagMapFiles" />

	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}" />
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps"
			command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<!--modifiedMaps mapDiffFile="${cvsDiffFile}" / -->
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
			lastMapTag=${buildId}
		</echo>
		<cvs dest="${buildDirectory}/maps/source/org.eclipse.birt.releng"
			command="tag v${package.version}_${buildId}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
		<antcall target="logger">
			<param name="message" value="Start to fetch BIRT sdk feature source" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<antcall target="logger">
			<param name="message" value="Finish fetching BIRT sdk feature source" />
		</antcall>
		<!-- Repackage latest odadesigneapi.jar and copy to model.adatpter.oda/lib 
			folder -->
		<copy
			todir="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib">
			<fileset dir="${baseLocation}/plugins" />
			<mapper type="regexp"
				from="org.eclipse.datatools.connectivity.oda.design_.*.jar" to="org.eclipse.datatools.connectivity.oda.design.jar" />
		</copy>

		<mkdir
			dir="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib/temp.folder" />
		<unzip
			dest="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib/temp.folder"
			overwrite="true">
			<fileset
				dir="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib">
				<include name="org.eclipse.datatools.connectivity.oda.design.jar" />
			</fileset>
		</unzip>
		<delete
			file="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib/org.eclipse.datatools.connectivity.oda.design.jar"
			failonerror="false" />
		<delete
			file="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib/odadesignapi.jar"
			failonerror="false" />

		<property name="work.dir"
			value="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda" />
		<property name="api.package.path"
			value="org/eclipse/datatools/connectivity/oda/design" />

		<jar destfile="${work.dir}/lib/odadesignapi.jar" manifest="${work.dir}/lib/temp.folder/META-INF/MANIFEST.MF">
			<fileset dir="${work.dir}/lib/temp.folder">
				<include name="${api.package.path}/*.class" />
				<exclude name="${api.package.path}/DesignFactory*" />
				<exclude name="${api.package.path}/DesignPackage*" />
			</fileset>
		</jar>
		<delete
			dir="${buildDirectory}/plugins/org.eclipse.birt.report.model.adapter.oda/lib/temp.folder"
			failonerror="false" />

		<!-- check new third party jar -->
		<antcall target="CheckNewThirdPartyJar" />

		<!-- replace for batik jar -->
		<antcall target="replaceBatik" />
	</target>

	<target name="replaceBatik" if="update.batik">

	</target>

	<target name="CheckNewThirdPartyJar" if="CheckNewJars">
		<exec executable="${eclipse.build.configs}/../../extras/checkNewJars.sh">
			<arg value="${buildDirectory}" />
			<arg value="${eclipse.build.configs}/../../extras" />
		</exec>
		<condition property="CheckThirdpartylog" value="true">
			<not>
				<filesmatch file1="${buildDirectory}/thirdPartyJar.log"
					file2="${eclipse.build.configs}/../../extras/thirdPartyJar.log.template"
					textfile="true" />
			</not>
		</condition>
		<ant antfile="${eclipse.build.configs}/../helper.xml" target="ThirdPartyJarCheckNotification" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<delete>
			<fileset dir="${buildDirectory}/features" includes="*.source*/**" />
			<fileset dir="${buildDirectory}/plugins" includes="*.source*/**" />
		</delete>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<target name="prePackage">
	</target>

	<target name="postAssemble" />


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}"
			token="@Replace_By_Date@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}/plugins" value="${BranchVersion}.${buildId}"
			token="@BUILD@">
			<include name="**/plugin.properties" />
		</replace>
		<replace dir="${buildDirectory}/plugins/" value="1.3.0.${buildId}"
			token="@Replace_By_Version@">
			<include name="org.w3c.sac/about.properties" />
		</replace>
		<replace dir="${buildDirectory}/plugins/" value="1.6.7.${buildId}"
			token="@Replace_By_Version@">
			<include name="org.mozilla.rhino/about.properties" />
		</replace>
		<chmod
			file="${buildDirectory}/plugins/org.eclipse.birt.report.engine/sdk/templateGenerator.sh"
			perm="755" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<condition property="logsAvailable">
			<istrue value="${javacVerbose}" />
		</condition>
		<antcall target="gatherLogs" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
	</target>

	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->

	<target name="gatherLogs">

		<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs/plugins" />

		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>

		<unzip dest="${postingDirectory}/${buildLabel}/compilelogs"
			overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.birt.sdk">
				<include name="*.log.zip" />
			</fileset>
		</unzip>

		<copy todir="${postingDirectory}/${buildLabel}/compilelogs"
			overwrite="true" failonerror="false">
			<fileset
				dir="${buildDirectory}/features/org.eclipse.birt/feature.temp.folder" />
		</copy>
		<copy todir="${postingDirectory}/${buildLabel}/compilelogs"
			overwrite="true" failonerror="false">
			<fileset
				dir="${buildDirectory}/features/org.eclipse.birt.integration.wtp/feature.temp.folder" />
		</copy>
		<copy todir="${postingDirectory}/${buildLabel}/compilelogs"
			overwrite="true" failonerror="false">
			<fileset
				dir="${buildDirectory}/features/org.eclipse.birt.example/feature.temp.folder" />
		</copy>
	</target>

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<!-- ===================================================================== -->
	<!-- Custom target for logging build time -->
	<!-- ===================================================================== -->
	<target name="logger">
		<tstamp prefix="timestamp">
			<format property="birt" pattern="yyyy-MM-dd HH:mm:ss" locale="en" />
		</tstamp>
		<echo message="${timestamp.birt} ${message}${line.separator}"
			file="${builder.dir}/monitor.log" append="true" />
	</target>
</project>

