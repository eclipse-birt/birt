<?xml version="1.0"?>
<!--
 *************************************************************************
 * Copyright (c) 2004, 2005 Actuate Corporation.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * Contributors:
 *  Actuate Corporation  - initial API and implementation
 *  
 *************************************************************************
 *
 *  Build.xml
 *
 *  Created on 03/15/2005
 *  Build script for project org.eclipse.birt.core
 *
 * 
 * The following are public targets callable by external users. 
 * 
 * "Clean" - Clean all objects created by this script. Individual project build script can not call this target; 
 * "Jar" - Compile source code and generate jar for this project.
 *          The compile dependency on other projects should be defined explicitly.
 *         eclipse.home should be passed in when Individual project build script  call this target; 
 *          the property of "failonerror" should be set true(default) when compiling source code
 * "UnitTest" - Run unit tests. This task must be called after calling Jar task, 
 *              so it needn't depend on Jar explicitly
 * "Export" - Export the project, for instance, jar files are copied to a designated folder. 
 *            this task must be called after calling Jar task, so it needn't depend on Jar explicitly
 * "JavaDoc" - generate java documents
 *
 * Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 
 *
 * Default target is "Jar".
 *
 * 
 * This script may also additional targets. These targets are private to this build script only. 
 *
 * "utest" - Run unit tests
 *
 * Notes:
 *  1. classpath need to be set for junit.jar
 *  2. This file now requires Ant 1.6
 *
 * Change History:
 *
 *    1. 09/22/2005: initial version
 *
-->


<project name="BIRT Core UI" default="Jar" basedir=".">
	<description>BIRT Core Project.</description>
	<!-- set global properties for this build -->
	<!-- Public properties, used by public targets, top level build script
		     will pass on the value at runtime. Properties will have there default
		     value.
		     eclipse.home
		     utest.report.dir
		     javadoc.dir
	-->
	
	<!-- ===== Default value for public properties ============= -->
	<property file="META-INF/MANIFEST.MF" />
	<property name="javadoc.dir" location="docs/api" />
	<property name="export.dir" location="export" />
	<property name="eclipse.home" location="." />
 	<property name="dir.src" value="src" />
 	<property name="dir.test" value="test" />
 	<property name="dir.bin" value="bin" />
 	<property name="dir.lib" value="lib" />
	
	<property name="core.dir" location="../org.eclipse.birt.core"/>
	
 	<property name="module.name" value="org.eclipse.birt.core.ui" />
	<property name="jar.name" value="${module.name}_${Bundle-Version}.jar" />	
	
	<path id="class.path">
		<pathelement path="${dir.bin}"/>
		<!--
		<fileset dir="${dir.lib}">
			<include name="**/*.jar"/>
		</fileset>
		-->
		<!-- depends on eclispe runtime plugin -->
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.core.runtime_*/runtime.jar"/>
			<include name="org.eclipse.osgi_*/*.jar"/>
			<include name="org.eclipse.core.*.jar"/>
			<include name="org.eclipse.osgi*.jar"/>
			<include name="org.eclipse.swt*.jar"/>
			<include name="org.eclipse.jface*.jar"/>
			<include name="org.eclipse.equinox*.jar"/>
			<include name="com.ibm.icu_*.jar"/>
		</fileset>
			
		<fileset file="${core.dir}/*.jar" />
	</path>
	

	<!-- Compile source code and generate jar for this project.
		 Input parameters:
		 	eclipse.home
	-->
	<target name="Jar" depends="compileSource">
		<jar destfile="${jar.name}" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${dir.bin}">
				<include name="**/*.class"/>
				<include name="**/*.xml"/>
				<include name="**/*.def"/>
				<include name="**/*.properties"/>
				<exclude name="**/*Test.class"/>
			</fileset>
			<fileset dir="." includes="about.html,plugin.xml,.options,schema/**,icons/**"/>
		</jar>
	</target>

	
	<!-- compile the source code -->
	<target name="compileSource" depends="init, buildDependents" description="compile the source ">
		<mkdir dir="${dir.bin}"/>

		<!-- copy any resource file we needed into the bin directory-->
		<copy todir="${dir.bin}">
			<fileset dir="${dir.src}">
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>

		<!-- Compile the java code from ${src} ${test_src} into ${bin} -->
		<javac srcdir="${dir.src}" 
			   destdir="${dir.bin}" 
			   encoding="utf-8" 
			   source="1.4" 
			   debug="true">
			
			<classpath refid="class.path"/>
		</javac>
	</target>



	<!-- Compile Source code and test code. -->
	<target name="compile" depends="compileSource, compileTest" description="compile all the source " />
		
	
	<!-- Export the project, for instance, jar files are copied to a designated folder
		 the dependency on Jar should implement in top level script by call sequence	
		 Parameters:
		 		- ${export.dir} target directory to put the plugin binaries
		 		- ${plugin.version} the version of plugin exported
	 -->
	<target name="Export">
		<copy todir="${export.dir}">
	        <fileset dir="." includes="${jar.name}"/>
	  </copy>
	</target>


	<!-- Compile Core Test Files 
		 javac.failonerror should be true.
	-->
	<target name="compileTest" description="compile the test ">
		<copy todir="${dir.bin}">
			<fileset dir="${dir.test}">
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
				<include name="**/*.golden"/>
				<include name="**/*.jpg"/>
				<include name="**/*.zip"/>
			</fileset>
		</copy>

		<!-- Compile the java code from ${dir.test} into ${dir.bin} -->
		<javac srcdir="${dir.test}" 
			   destdir="${dir.bin}" 
			   encoding="utf-8" 
			   source="1.4" 
			   debug="true"
			   failonerror="true" >
			   
			<classpath refid="class.path"/>
		</javac>
	</target>

	<!-- No unit tests, dummy target -->
	<target name="UnitTest" />

	<!-- Clean all objects created by this script -->
	<target name="Clean" description="clean up">
		<!-- Delete the ${bin} and ${utest} directory trees -->
		<delete dir="${dir.bin}"/>
		<delete dir="${dir.utest}"/>
		<delete dir="${utes.report.dir}"/>
		<delete file="${jar.name}"/>
	</target>

	<!-- Generate the JavaDoc.
		 Parameters:
		 		- ${javadoc.dir} target directory to put the java document
	 -->
	<target name="Javadoc">
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" 
				 author="true" 
				 version="true" 
				 use="true" 
				 windowtitle="Birt Wizard Framework API" 
				 source="1.4"
				 packagenames="${module.name}.*">
				<packageset dir="${dir.src}" defaultexcludes="yes" />
	 	        <bottom><![CDATA[<i>Copyright &#169;  2005 Actuate Corp. All rights reserved. </i>]]></bottom>
				<classpath refid="class.path" />
		</javadoc>
	</target>
	
	
	<target name="init" description="initialization">
		<condition property="eclipse.home.isset">
			<isset property="eclipse.home" />
		</condition>
	
		<!-- eclipse.home must be set -->	
		<fail unless="eclipse.home.isset" message="Property eclipse.home should be set, build failed!"/>
	</target>

	<!-- Build the dependent projects -->
	<target name="buildDependents" description="Build all the projects it depends on">
		<echo message="start call Jar task in ${core.dir}" level="info"/>
		<ant dir="${core.dir}" antfile="BuildCore.xml" target="Jar" inheritall="false">
		 	<property name="eclipse.home" value="${eclipse.home}" />
		</ant>
		<echo message="end call Jar task in ${core.dir}" level="info" />
	</target>
	
	<!-- private task, compile source and test code and run unit test-->
	<target name="utest" depends="compileSource, UnitTest" />
</project>
