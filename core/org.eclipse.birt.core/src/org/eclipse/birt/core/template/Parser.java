/*******************************************************************************
 * Copyright (c) 2021 Contributors to the Eclipse Foundation
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   See git history
 *******************************************************************************/
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package org.eclipse.birt.core.template;

import java.io.Reader;

public class Parser/* @bgen(jjtree) */ implements ParserTreeConstants, ParserConstants {/* @bgen(jjtree) */
	protected JJTParserState jjtree = new JJTParserState();

	public Parser() {
		this((Reader) null);
	}

	public ASTTemplate parse(Reader reader) throws ParseException {
		ReInit(reader);
		Template();
		return (ASTTemplate) jjtree.rootNode();
	}

	final public void Attribute() throws ParseException {
		/* @bgen(jjtree) Attribute */
		ASTAttribute jjtn000 = new ASTAttribute(this, JJTATTRIBUTE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token n, v;
		try {
			n = jj_consume_token(A_NAME);
			jj_consume_token(A_EQ);
			v = jj_consume_token(CDATA);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setName(n.image);
			jjtn000.setValue(v.image);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Ebody_content() throws ParseException {
		/* @bgen(jjtree) Ebody_content */
		ASTEbody_content jjtn000 = new ASTEbody_content(this, JJTEBODY_CONTENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_1: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TEXT:
					;
					break;
				default:
					jj_la1[0] = jj_gen;
					break label_1;
				}
				Text();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Image() throws ParseException {
		/* @bgen(jjtree) Image */
		ASTImage jjtn000 = new ASTImage(this, JJTIMAGE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(START_IMAGE);
			label_2: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case A_NAME:
					;
					break;
				default:
					jj_la1[1] = jj_gen;
					break label_2;
				}
				Attribute();
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ELEMENTC:
				jj_consume_token(ELEMENTC);
				break;
			case TAGC:
				jj_consume_token(TAGC);
				Ebody_content();
				jj_consume_token(END_IMAGE);
				jj_consume_token(TAGC);
				break;
			default:
				jj_la1[2] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void ValueOf() throws ParseException {
		/* @bgen(jjtree) ValueOf */
		ASTValueOf jjtn000 = new ASTValueOf(this, JJTVALUEOF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(START_VALUEOF);
			label_3: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case A_NAME:
					;
					break;
				default:
					jj_la1[3] = jj_gen;
					break label_3;
				}
				Attribute();
			}
			jj_consume_token(TAGC);
			Ebody_content();
			jj_consume_token(END_VALUEOF);
			jj_consume_token(TAGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void ViewTimeValueOf() throws ParseException {
		/* @bgen(jjtree) ViewTimeValueOf */
		ASTViewTimeValueOf jjtn000 = new ASTViewTimeValueOf(this, JJTVIEWTIMEVALUEOF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(START_VIEWTIMEVALUEOF);
			label_4: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case A_NAME:
					;
					break;
				default:
					jj_la1[4] = jj_gen;
					break label_4;
				}
				Attribute();
			}
			jj_consume_token(TAGC);
			Ebody_content();
			jj_consume_token(END_VIEWTIMEVALUEOF);
			jj_consume_token(TAGC);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Text() throws ParseException {
		/* @bgen(jjtree) Text */
		ASTText jjtn000 = new ASTText(this, JJTTEXT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token text;
		try {
			text = jj_consume_token(TEXT);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.appendContent(text.image);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Template() throws ParseException {
		/* @bgen(jjtree) Template */
		ASTTemplate jjtn000 = new ASTTemplate(this, JJTTEMPLATE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_5: while (true) {
				if (jj_2_1(2)) {

				} else {
					break label_5;
				}
				if (jj_2_2(9)) {
					ValueOf();
				} else if (jj_2_3(9)) {
					ViewTimeValueOf();
				} else if (jj_2_4(6)) {
					Image();
				} else if (jj_2_5(2)) {
					Text();
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_3R_8() {
		if (jj_scan_token(START_IMAGE)) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_13()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_scan_token(11)) {
			jj_scanpos = xsp;
			if (jj_3R_14()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_12() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_11() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_16()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_7() {
		if (jj_scan_token(START_VIEWTIMEVALUEOF)) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_12()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(TAGC) || jj_3R_11() || jj_scan_token(END_VIEWTIMEVALUEOF) || jj_scan_token(TAGC)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_13() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_1() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_2()) {
			jj_scanpos = xsp;
			if (jj_3_3()) {
				jj_scanpos = xsp;
				if (jj_3_4()) {
					jj_scanpos = xsp;
					if (jj_3_5()) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_scan_token(TAGC) || jj_3R_11() || jj_scan_token(END_IMAGE) || jj_scan_token(TAGC)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_6() {
		if (jj_scan_token(START_VALUEOF)) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_10()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(TAGC) || jj_3R_11() || jj_scan_token(END_VALUEOF) || jj_scan_token(TAGC)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_15() {
		if (jj_scan_token(A_NAME) || jj_scan_token(A_EQ) || jj_scan_token(CDATA)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_8()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_7()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_2() {
		if (jj_3R_6()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_10() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_9() {
		if (jj_scan_token(TEXT)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_16() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	/** Generated Token Manager. */
	public ParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[5];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x100, 0x10000, 0xc00, 0x10000, 0x10000, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[5];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public Parser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public Parser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor. */
	public Parser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor with generated Token Manager. */
	public Parser(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) {
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {

		private static final long serialVersionUID = 1L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) {
				jj_add_error_token(kind, i);
			}
		}
		if (jj_scanpos.kind != kind) {
			return true;
		}
		if (jj_la == 0 && jj_scanpos == jj_lastpos) {
			throw jj_ls;
		}
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = token_source.getNextToken();
			}
		}
		return t;
	}

	private int jj_ntk() {
		jj_nt = token.next;
		if (jj_nt == null) {
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		} else {
			return (jj_ntk = jj_nt.kind);
		}
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) {
			return;
		}
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) {
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[18];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 5; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 18; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 5; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
