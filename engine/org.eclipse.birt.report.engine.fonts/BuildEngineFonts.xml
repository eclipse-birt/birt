<?xml version="1.0"?>
<!--
 *************************************************************************
 * Copyright (c) 2004, 2005 Actuate Corporation.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * Contributors:
 *  Actuate Corporation  - initial API and implementation
 *  
 *************************************************************************
 *
 *  Build.xml
 *
 *  Created on 03/15/2005
 *  Build script for project org.eclipse.birt.report.engine.fonts
 *
 * 
 * The following are public targets callable by external users. 
 * 
 * "Clean" - Clean all objects created by this script. Individual project build script can not call this target; 
 * "Jar" - Compile source code and generate jar for this project.
 *          The compile dependency on other projects should be defined explicitly.
 *         eclipse.home should be passed in when Individual project build script  call this target; 
 *          the property of "failonerror" should be set true(default) when compiling source code
 * "UnitTest" - Run unit tests. This task must be called after calling Jar task, 
 *              so it needn't depend on Jar explicitly
 * "Export" - Export the project as a single Jard file
 *			  includes: binaries classes, libs, META-INF/MANIFEST.MF and other related files 
 *            this task must be called after calling Jar task, so it needn't depend on Jar explicitly
 * "JavaDoc" - generate java documents
 *
 * Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 
 *
 * Default target is "Jar".
 *
 * 
 * This script may also additional targets. These targets are private to this build script only. 
 *
 * "utest" - Run unit tests
 *
 * Notes:
 *  1. classpath need to be set for junit.jar
 *  2. This file now requires Ant 1.6
 *
 * Change History:
 *
 *    1. 04/19/2006: initial version
 *
-->


<project name="BIRT Engine Fonts Project" default="Jar" basedir=".">
	<description>BIRT Core Project.</description>
	<!-- set global properties for this build -->
	<!-- Public properties, used by public targets, top level build script
		     will pass on the value at runtime. Properties will have there default
		     value.
		     eclipse.home
		     utest.report.dir
		     javadoc.dir
		     plugin.version
	-->

	<!-- ===== Default value for public properties ============= -->
	<property name="utest.report.dir" location="utestreports" />
	<property name="javadoc.dir" location="docs/api" />
	<property name="export.dir" location="export" />

	<property name="eclipse.home" location="." />

	<property name="fonts" value="fonts" />
	<property name="module.name" value="org.eclipse.birt.report.engine.fonts" />

	<!-- Compile source code and generate jar for this project.
		 Input parameters:
		 	eclipse.home
	-->
	<target name="Jar" depends="compileSource">
	</target>


	<!-- compile the source code -->
	<target name="compileSource" depends="init" description="compile the source ">
	</target>



	<!-- Compile Source code and test code. -->
	<target name="compile" depends="compileSource, compileTest" description="compile all the source " />


	<!-- Export the project as a single Jard file
		 includes: binaries classes, libs, META-INF/MANIFEST.MF and other related files
		 the dependency on Jar should implement in top level script by call sequence	
		 Parameters:
		 		- ${export.dir} target directory to put the single Jard file
		 		- ${module.name} the module name of this project
		 		- ${Bundle-Version} the version of this bundle exported 
	 -->
	<target name="Export" depends="Jar">
		<property file="META-INF/MANIFEST.MF" />
		<copy todir="${export.dir}/${module.name}_${Bundle-Version}">
		     <fileset dir="." includes="*.jar,plugin.xml,about.html, .options, fontsConfig.xml,${fonts}/**, schema/**, about_files/**, plugin*.properties, META-INF/**"/>
		</copy>
	</target>

	<!-- Compile Core Test Files 
		 javac.failonerror should be true.
	-->
	<target name="compileTest" description="compile the test ">
	</target>

	<!-- public task UnitTest will not explicitly depend on complie, Top level script should call compile before calling UnitTest -->
	<target name="UnitTest">
	</target>


	<target name="init" description="initialization">
		<condition property="eclipse.home.isset">
			<isset property="eclipse.home" />
		</condition>
	
		<!-- eclipse.home must be set -->
		<fail unless="eclipse.home.isset" message="Property eclipse.home should be set, build failed!"/>
	</target>



	<!-- private task, compile source and test code and run unit test-->
	<target name="utest" depends="compileSource, UnitTest" />
</project>
