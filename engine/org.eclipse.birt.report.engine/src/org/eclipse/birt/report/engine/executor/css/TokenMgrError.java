/*******************************************************************************
 * Copyright (c) 2021 Contributors to the Eclipse Foundation
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   See git history
 *******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */
package org.eclipse.birt.report.engine.executor.css;

public class TokenMgrError extends Error {
	/*
	 * Ordinals for various reasons why an Error of this type can be thrown.
	 */

	/**
	 *
	 */
	private static final long serialVersionUID = -5103099875172154695L;

	/**
	 * Lexical error occured.
	 */
	static final int LEXICAL_ERROR = 0;

	/**
	 * An attempt wass made to create a second instance of a static token manager.
	 */
	static final int STATIC_LEXER_ERROR = 1;

	/**
	 * Tried to change to an invalid lexical state.
	 */
	static final int INVALID_LEXICAL_STATE = 2;

	/**
	 * Detected (and bailed out of) an infinite loop in the token manager.
	 */
	static final int LOOP_DETECTED = 3;

	/**
	 * Indicates the reason why the exception is thrown. It will have one of the
	 * above 4 values.
	 */
	int errorCode;

	/**
	 * Replaces unprintable characters by their espaced (or unicode escaped)
	 * equivalents in the given string
	 */
	protected static final String addEscapes(String str) {
		StringBuilder retval = new StringBuilder();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
			case 0:
				continue;
			case '\b':
				retval.append("\\b"); //$NON-NLS-1$
				continue;
			case '\t':
				retval.append("\\t"); //$NON-NLS-1$
				continue;
			case '\n':
				retval.append("\\n"); //$NON-NLS-1$
				continue;
			case '\f':
				retval.append("\\f"); //$NON-NLS-1$
				continue;
			case '\r':
				retval.append("\\r"); //$NON-NLS-1$
				continue;
			case '\"':
				retval.append("\\\""); //$NON-NLS-1$
				continue;
			case '\'':
				retval.append("\\\'"); //$NON-NLS-1$
				continue;
			case '\\':
				retval.append("\\\\"); //$NON-NLS-1$
				continue;
			default:
				ch = str.charAt(i);
				if (ch < 0x20 || ch > 0x7e) {
					String s = "0000" + Integer.toString(ch, 16); //$NON-NLS-1$
					retval.append("\\u" + s.substring(s.length() - 4)); //$NON-NLS-1$
				} else {
					retval.append(ch);
				}
				continue;
			}
		}
		return retval.toString();
	}

	/**
	 * Returns a detailed message for the Error when it is thrown by the token
	 * manager to indicate a lexical error. Parameters : EOFSeen : indicates if EOF
	 * caused the lexicl error curLexState : lexical state in which this error
	 * occured errorLine : line number when the error occured errorColumn : column
	 * number when the error occured errorAfter : prefix that was seen before this
	 * error occured curchar : the offending character Note: You can customize the
	 * lexical error message by modifying this method.
	 */
	protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn,
			String errorAfter, char curChar) {
		return ("Lexical error at line " + //$NON-NLS-1$
				errorLine + ", column " + //$NON-NLS-1$
				errorColumn + ".  Encountered: " + //$NON-NLS-1$
				(EOFSeen ? "<EOF> " //$NON-NLS-1$
						: ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int) curChar + "), ") //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
				+ "after : \"" + addEscapes(errorAfter) + "\""); //$NON-NLS-2$
	}

	/**
	 * You can also modify the body of this method to customize your error messages.
	 * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of
	 * end-users concern, so you can return something like :
	 *
	 * "Internal Error : Please file a bug report .... "
	 *
	 * from this method for such cases in the release version of your parser.
	 */
	@Override
	public String getMessage() {
		return super.getMessage();
	}

	/*
	 * Constructors of various flavors follow.
	 */

	public TokenMgrError() {
	}

	public TokenMgrError(String message, int reason) {
		super(message);
		errorCode = reason;
	}

	public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar,
			int reason) {
		this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
	}
}
