/*******************************************************************************
 * Copyright (c) 2004 Actuate Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0.html
 *
 * Contributors:
 *  Actuate Corporation  - initial API and implementation
 *******************************************************************************/

options {
    IGNORE_CASE  = true;
    STATIC = false;	  
}

PARSER_BEGIN(XDepthParser)

package  org.eclipse.birt.report.model.util.xpathparser;

import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

/**
 * Parses the depths of xpath. 
 *
 * @version $Revision$ $Date$
 */
 
public class XDepthParser
{
	private List depths = new ArrayList();
	
	// ******** the type of current element *****

	static final int INVALID = 0;
	static final int ELEMENT = 1;
	static final int SLOT = 2;
	static final int PROPERTY = 4;
	static final int UNKNOWN = 8;
	
	private int currentValueType = UNKNOWN;
	
	public XDepthParser( String input )
	{
		this( new StringReader( input ) );
	}

       
	/**
	 * Returns the depth.
	 *  
	 */
	 
	public List getDepthInfo( )
	{
		return depths;
	}	
	
	class DepthInfo
	 {
	 	private String propName;
	 	private String propValue;
	 	
	 	private int index;
	 	
	 	private String tagName;
	 	
	 	private int valueType = UNKNOWN;
	 	
	 	DepthInfo(String tagName, Object[] props)
	 	{
	 		this.tagName = tagName;
			this.index = index;
			if (props instanceof String[])
			{
				propName = (String) props[0];
				propValue = (String) props[1];				
			}
			else if (props instanceof Integer[])
			{
				index = ((Integer) props[0]).intValue() - 1;
			}
	 	}
	 	
	 	int getIndex()
	 	{
	 		return index;
	 	}
	 	
	 	String getPropertyName()
	 	{
	 		return propName;
	 	}
	 	
	 	String getPropertyValue()
	 	{
	 		return propValue;
	 	}
	 	
	 	String getTagName()
	 	{
	 		return tagName;
	 	}
	 	
	 	private void setValueType( int valueType )
	 	{
	 		this.valueType = valueType;
	 	}
	 	
	 	int getValueType( )
	 	{
	 		return valueType;
	 	}
	 }
}
PARSER_END(XDepthParser)


/*
 * The tokenizer 
 */

<DEFAULT>
TOKEN :
{
  < PROPPREFIX : "@" >
  | < EQUAL    : "=">
  | < QUOTE    : "\"">
  | < LEFTB    : "[">
  | < RIGHTB    : "]">
  | < SEPARATOR	: "/">
}

<DEFAULT>
TOKEN : /* basic tokens */
{ 
  < NONASCII    : ["\200"-"\uffff"] >
  | < #CHAR		:	["a"-"z", "A"-"Z", "-"] >
  | < #DIGITAL	:	["0"-"9"] >  
  | < #NMCHAR	:	["a"-"z", "A"-"Z", "0"-"9", "-", "_", " "] | <NONASCII> >
}

<DEFAULT>
TOKEN :
{
 < PROPNAME	: "name" > 
 | <PROPID 	:	"id" >
 | <PROPSLOTNAME :	"slotName">
 | < INDEX	: (<DIGITAL>)+ > 
}

/*************/

<DEFAULT>
TOKEN :
{
 < NAME : (<NMCHAR>)+ > 
}

/**
 * Deals with the shorthand property font.
 */
 
void parse():
{	
	Token t1;
}
{
	 (<SEPARATOR> 
	 	( (("*")? <EOF>) | PureProperty() | Depth( ) ) )*
}

void Depth():
{	
	Object[] props = null;
	int index = -1;
	
	Token t1;
}
{
	 t1 = <NAME>
	( props = Property() )?		 
	 {
 		DepthInfo tmpDepth = new DepthInfo(t1.image, props);
	 	tmpDepth.setValueType(currentValueType);
	 	depths.add(tmpDepth);
	 	return;
	 }	
}

void PureProperty():
{	
	Token t1;
    String[] props = {"name", null};
}
{
	 <PROPPREFIX> 
     (t1 = <NAME>      
     |      
     t1 = <PROPNAME> )
	 <EOF>
	 {
	    props[1] = t1.image;
	 	DepthInfo tmpDepth = new DepthInfo(null, props);
	 	tmpDepth.setValueType(PROPERTY);
	 	depths.add(tmpDepth);
	 	return;
	 }
}

Object[] Property():
{	
	Token t2;
	Object[] rets;
	int index;
}
{
	 <LEFTB>
	 ( <PROPPREFIX>
		 {
		 	rets = PropertyPair();
		 	return rets;
		 }
		 | 
		 index = Index()
		 {
		 	rets	= new Integer[2];
		 	rets[0] = new Integer(index);
		 	return rets;
		 }	
	 ) 
}

String[] PropertyPair():
{
	String[] rets = {null, null};
}
{
	rets[0] = PropertyName()
	<EQUAL>
	<QUOTE> 
	rets[1] = PropertyValue()
	<QUOTE> 
	<RIGHTB>
	{ return rets; }
}

String PropertyName():
{
	Token t1;
}
{
	t1 = <PROPNAME> 
	{
		currentValueType = PROPERTY;
		return t1.image;
	}
	| t1 = <PROPID>
	{
		currentValueType = ELEMENT ;
		return t1.image;
	}
	| t1 = <PROPSLOTNAME>
	{
		currentValueType = SLOT;
		return t1.image;
	}
	| t1 = <NAME>
	{
		currentValueType = INVALID;
		return t1.image;
	}
}

String PropertyValue():
{
	Token t1;
}
{
	t1 = <INDEX> 
	{
		return t1.image;
	}
	| t1 = <NAME>
	{
		return t1.image;
	}
}

int Index():
{	
	Token t1;	
	int value = -1;
}
{
	 t1 = <INDEX>
	 {value = Integer.parseInt(t1.image);}
	 <RIGHTB>
	 { return value; }	 	 
}


